;
; GE Vivid S70 - Medicus 3 integration
; CMD: S70.exe %IDUZI% %RODCISN% %JMENO% %PRIJMENI% %VYSKA% %VAHA%
;
; Copyright (c) 2020 Kyoma Hooin
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <https://www.gnu.org/licenses/>.
;

#AutoIt3Wrapper_Res_Description=GE Vivid S70 Medicus 3 integration
#AutoIt3Wrapper_Res_ProductName=S70
#AutoIt3Wrapper_Res_ProductVersion=2.3
#AutoIt3Wrapper_Res_CompanyName=Kyouma Houin
#AutoIt3Wrapper_Res_LegalCopyright=GNU GPL v3
#AutoIt3Wrapper_Res_Language=1029
#AutoIt3Wrapper_Icon=S70.ico
#NoTrayIcon

; -------------------------------------------------------------------------------------------
; INCLUDE
; -------------------------------------------------------------------------------------------

#include <GUIConstantsEx.au3>
#include <GUIConstants.au3>
#include <Clipboard.au3>
#include <Excel.au3>
#include <ExcelConstants.au3>
#include <File.au3>
#include <Date.au3>
#include <Print.au3>
#include <Json.au3>
#include <GDIPlus.au3>
#include <LZNT1.au3>

; -------------------------------------------------------------------------------------------
; VAR
; -------------------------------------------------------------------------------------------

global const $VERSION = '2.3'
global $AGE = 30; default stored data age in days

global $log_file = @ScriptDir & '\' & 'S70.log'
global $config_file = @ScriptDir & '\' & 'S70.ini'

global $export_path = @ScriptDir & '\' & 'input'
global $archive_path = @ScriptDir & '\' & 'archive'
global $history_path = $archive_path & '\' & 'history'

global const $runtime = @YEAR & '/' & @MON & '/' & @MDAY & ' ' & @HOUR & ':' & @MIN & ':' & @SEC

; message interception hook list
global $hook_text_map[0], $hook_data_map[0][2]

; default result template
global const $result_template[2]=[ _
	"Srdeční oddíly nedilatované, normální systolická funkce obou komor, chlopně bez významnější valvulopatie, bez známek zvýšené tenze v plicnici.", _
	"Dobrá systolická funkce obou nedilat. komor, chlopenní aparát bez významnější valvulopatie, nejsou známky zvýšené tenze v plicnici." _
]

; Medicus user ID to name
global const $user_template='{' _
	& '"5":"Jan Škoda",' _
	& '"6":"Jiří Procházka",' _
	& '"8":"Tomáš Březák"' _
& '}'

; 5 to 4 column map template
global const $map_template='{' _
	& '"lk":[0,1,2,3,5,6,4,13,7,8,9,14,10,11,12,Null,15,16,17,18],' _
	& '"ls":[0,1,2,Null,7,8],' _
	& '"pk":[0,1,2,3,4,5,6],' _
	& '"ps":[0,1,2,3,4],' _
	& '"ao":[0,1,2,3,4],' _
	& '"ach":[0,1,2,7,3,4,13,14,5,6,Null,8,9,10,11,12],' _
	& '"mch":[0,1,2,3,5,6,7,Null,4,8,9,14,10,11,12,13,14,15,16,17,18],' _
	& '"pch":[0,1,2,3,4],' _
	& '"tch":[0,1,2,3],' _
	& '"p":[],' _
	& '"other":[0,1]' _
& '}'

; default note template
global const $note_template='{' _
	& '"lk":["nedilatovaná, bez hypertrofie, kinetika v normě, normální celková systolická funkce, diastolická funkce v normě", "nedilatovaná, bez hypertrofie, kinetika v normě, normální celková systolická funkce, diastolická porucha relaxace v normě"],' _
	& '"ls":["nedilatovaná", "nedilatovaná"],' _
	& '"pk":["nedilatovaná, normální systolická funkce", "nedilatovaná, normální systolická funkce"],' _
	& '"ps":["nedilatovaná", "nedilatovaná"],' _
	& '"ao":["ascendentní aorta nedilatovaná", "ascendentní aorta nedilatovaná"],' _
	& '"ach":["trojcípá, cípy jemné, bez vady", "trojcípá, fibrózní, bez vady"],' _
	& '"mch":["jemná, bez vady", "fibrózní, stopová regurgitace 1/4"],' _
	& '"pch":["jemná, normální průtok, bez vady", "jemná, normální průtok, stopová regurgitace 1/4"],' _
	& '"tch":["jemná, bez vady", "jemná, stopová regurgitace 1/4"],' _
	& '"p":["bez patologické separace", "bez patologické separace"],' _
	& '"other":["DDŽ nedilatovaná, kolabuje nad 50% s respirací", "DDŽ nedilatovaná, kolabuje nad 50% s respirací"]' _
& '}'

; data template
global const $data_template='{' _
	& '"bsa":null,' _
	& '"weight":null,' _
	& '"height":null,' _
	& '"date":null,' _
	& '"result":null,' _
	& '"group":{' _
		& '"lk":{"label":"Levá komora", "note":null, "id":null},' _
		& '"ls":{"label":"Levá síň", "note":null, "id":null},' _
		& '"pk":{"label":"Pravá komora", "note":null, "id":null},' _
		& '"ps":{"label":"Pravá síň", "note":null, "id":null},' _
		& '"ao":{"label":"Aorta", "note":null, "id":null},' _
		& '"ach":{"label":"Aortální chlopeň", "note":null, "id":null},' _
		& '"mch":{"label":"Mitrální chlopeň", "note":null, "id":null},' _
		& '"pch":{"label":"Pulmonální chlopeň", "note":null, "id":null},' _
		& '"tch":{"label":"Trikuspidální chlopeň", "note":null, "id":null},' _
		& '"p":{"label":"Perikard", "note":null, "id":null},' _
		& '"other":{"label":"Ostatní", "note":null, "id":null}' _
	& '},' _
	& '"data":{' _
		& '"lk":{' _
			& '"LVIDd":{"label":"LVd", "unit":"mm", "value":null, "id":null},' _
			& '"LVIDs"::{"label":"LVs", "unit":"mm", "value":null, "id":null},' _
			& '"IVSd":{"label":"IVS", "unit":"mm", "value":null, "id":null},' _
			& '"LVPWd":{"label":"ZS", "unit":"mm", "value":null, "id":null},' _
			& '"FS":{"label":"FS", "unit":"%", "value":null, "id":null},' _
			& '"LVd index":{"label":"LVd index", "unit":"mm/m²", "value":null, "id":null},' _
			& '"LVs index":{"label":"LVs index", "unit":"mm/m²", "value":null, "id":null},' _
			& '"LVEF % odhad":{"label":"LVEF % odhad", "unit":"%", "value":null, "id":null},' _
			& '"LVEF % Teich":{"label":"LVEF % Teich.", "unit":"%", "value":null, "id":null},' _
			& '"EF Biplane":{"label":"LVEF biplane", "unit":"%", "value":null, "id":null},' _
			& '"LVmass":{"label":"LVmass", "unit":"g", "value":null, "id":null},' _
			& '"LVmass-BSA":{"label":"LVmass-BSA", "unit":"g/m²", "value":null, "id":null},' _
			& '"LVmass-i^2,7":{"label":"LVmass-i^2.7", "unit":"g/m2.7", "value":null, "id":null},' _
			& '"RWT":{"label":"RWT", "unit":"ratio", "value":null, "id":null},' _
			& '"SV-biplane":{"label":"SV-biplane", "unit":"ml", "value":null, "id":null},' _
			& '"LVEDV MOD BP":{"label":"EDV", "unit":"ml", "value":null, "id":null},' _
			& '"EDVi":{"label":"EDVi", "unit":"ml/m²", "value":null, "id":null},' _
			& '"LVESV MOD BP":{"label":"ESV", "unit":"ml", "value":null, "id":null},' _
			& '"ESVi":{"label":"ESVi", "unit":"ml/m²", "value":null, "id":null},' _
			& '"SV MOD A4C":{"label":null, "unit":null, "value":null},' _; calculation
			& '"SV MOD A2C":{"label":null, "unit":null, "value":null}' _; calculation
		& '},' _
		& '"ls":{' _
			& '"LA Diam":{"label":"LA-plax", "unit":"mm", "value":null, "id":null},' _
			& '"LA Minor":{"label":"LA šířka", "unit":"mm", "value":null, "id":null},' _
			& '"LA Major":{"label":"LA délka", "unit":"mm", "value":null, "id":null},' _
			& '"LAV-A4C":{"label":"LAV-1D", "unit":"ml", "value":null, "id":null},' _
			& '"LAVi":{"label":"LAVi-1D", "unit":"ml/m²", "value":null, "id":null},' _
			& '"L Area-A4C":{"label":"Area-A4C", "unit":"cm²", "value":null, "id":null},' _
			& '"L Area-A2C":{"label":"Area-A2C", "unit":"cm²", "value":null, "id":null},' _
			& '"LAV-2D":{"label":"LAV-2D", "unit":"ml", "value":null, "id":null},' _
			& '"LAVi-2D":{"label":"LAVi-2D", "unit":"ml/m²", "value":null, "id":null},' _
			& '"LAEDV A-L A4C":{"label":null, "unit":null, "value":null},' _; calculation
			& '"LAEDV MOD A4C":{"label":null, "unit":null, "value":null},' _; calculation
		& '},' _
		& '"pk":{' _
			& '"RV Major":{"label":"RV-plax", "unit":"mm", "value":null, "id":null},' _
			& '"RVIDd":{"label":"RVD1", "unit":"mm", "value":null, "id":null},' _
			& '"TAPSE":{"label":"TAPSE", "unit":"mm", "value":null, "id":null},' _
			& '"S-RV":{"label":"Sm-RV", "unit":"cm/s", "value":null, "id":null},' _
			& '"FAC%":{"label":"FAC%", "unit":"%", "value":null, "id":null},' _
			& '"EDA":{"label":"EDA", "unit":"cm²", "value":null, "id":null},' _
			& '"ESA":{"label":"ESA", "unit":"cm²", "value":null, "id":null}' _
		& '},' _
		& '"ps":{' _
			& '"RA Minor":{"label":"RA šířka", "unit":"mm", "value":null, "id":null},' _
			& '"RA Major":{"label":"RA délka", "unit":"mm", "value":null, "id":null},' _
			& '"P Area-A4C":{"label":"Area-A4C", "unit":"cm²", "value":null, "id":null}' _
			& '"RAV":{"label":"RAV", "unit":"ml", "value":null, "id":null},' _
			& '"RAVi":{"label":"RAVi", "unit":"ml/m²", "value":null, "id":null}' _
		& '},' _
		& '"ao":{' _
			& '"A Anulus":{"label":"Anulus", "unit":"mm", "value":null, "id":null},' _
			& '"Ao Diam SVals":{"label":"Bulbus", "unit":"mm", "value":null, "id":null},' _
			& '"Ao Diam":{"label":"Asc-Ao(MM)", "unit":"mm", "value":null, "id":null}' _
			& '"Asc-Ao 2D":{"label":"Asc-Ao(2D)", "unit":"mm", "value":null, "id":null}' _
			& '"Asc-Ao index":{"label":"Asc-Ao index", "unit":"mm/m²", "value":null, "id":null}' _
		& '},' _
		& '"ach":{' _
			& '"AV Vmax":{"label":"Vmax", "unit":"m/s", "value":null, "id":null},' _
			& '"AV max/meanPG":{"label":"PG max/mean", "unit":"torr", "value":null, "id":null},' _
			& '"AV VTI":{"label":"Ao-VTI", "unit":"cm", "value":null, "id":null},' _
			& '"LVOT Diam":{"label":"LVOT", "unit":"mm", "value":null, "id":null},' _
			& '"LVOT VTI":{"label":"LVOT-VTI", "unit":"cm", "value":null, "id":null},' _
			& '"AVA":{"label":"AVA", "unit":"cm²", "value":null, "id":null},' _
			& '"AVAi":{"label":"AVAi", "unit":"cm²/m²", "value":null, "id":null},' _
			& '"SV/SVi":{"label":"SV/SVi", "unit":"ml/m²", "value":null, "id":null},' _
			& '"VTI LVOT/Ao":{"label":"VTI LVOT/Ao", "unit":"ratio", "value":null, "id":null},' _
			& '"AR RV":{"label":"AR-RV", "unit":"ml", "value":null, "id":null},' _
			& '"AR ERO":{"label":"AR-ERO", "unit":"cm²", "value":null, "id":null},' _
			& '"AR VTI":{"label":"AR-VTI", "unit":"cm", "value":null, "id":null},' _
			& '"AR Rad":{"label":"PISA radius", "unit":"mm", "value":null, "id":null},' _
			& '"AR-PHT":{"label":"AR-PHT", "unit":"ms", "value":null, "id":null},' _
			& '"AR-SLOPE":{"label":"AR-SLOPE", "unit":"cm/s²", "value":null, "id":null},' _
			& '"AV maxPG":{"label":null, "unit":null, "value":null},' _; calculation
			& '"AV meanPG":{"label":null, "unit":null, "value":null},' _; calculation
			& '"SV":{"label":null, "unit":"ml/m²", "value":null},' _; calculation
			& '"SVi":{"label":null, "unit":"ml/m²", "value":null}' _; calculation
		& '},' _
		& '"mch":{' _
			& '"MV E Vel":{"label":"E", "unit":"cm/s", "value":null, "id":null},' _
			& '"MV A Vel":{"label":"A", "unit":"cm/s", "value":null, "id":null},' _
			& '"MV E/A Ratio":{"label":"E/A", "unit":"ratio", "value":null, "id":null},' _
			& '"MV DecT":{"label":"DecT", "unit":"ms", "value":null, "id":null},' _
			& '"MV max/meanPG":{"label":"PG max/mean", "unit":"torr", "value":null, "id":null},' _
			& '"EmSept":{"label":"EmSept", "unit":"cm/s", "value":null, "id":null},' _
			& '"EmLat":{"label":"EmLat", "unit":"cm/s", "value":null, "id":null},' _
			& '"E/Em":{"label":"E/Em", "unit":"ratio", "value":null, "id":null},' _
			& '"MV PHT":{"label":"MV-PHT", "unit":"ms", "value":null, "id":null},' _
			& '"MVA-PHT":{"label":"MVA-PHT", "unit":"cm²", "value":null, "id":null},' _
			& '"MR RV":{"label":"MR-RV", "unit":"ml", "value":null, "id":null},' _
			& '"MR ERO":{"label":"MR-ERO", "unit":"cm²", "value":null, "id":null},' _
			& '"MR VTI":{"label":"MR-VTI", "unit":"cm", "value":null, "id":null},' _
			& '"MR Rad":{"label":"PISA radius", "unit":"mm", "value":null, "id":null},' _
			& '"MVAi-PHT":{"label":"MVAi-PHT", "unit":"cm²/m²", "value":null, "id":null},' _
			& '"Anulus-AP":{"label":"Anulus-AP", "unit":"mm", "value":null, "id":null},' _
			& '"Anulus-IC":{"label":"Anulus-IC", "unit":"mm", "value":null, "id":null},' _
			& '"M Spid":{"label":"Přední cíp", "unit":"mm", "value":null, "id":null},' _
			& '"AP Spid ratio":{"label":"Anulus-AP/P.cíp", "unit":"ratio", "value":null, "id":null},' _
			& '"MV maxPG":{"label":null, "unit":null, "value":null},' _; calculation
			& '"MV meanPG":{"label":null, "unit":null, "value":null}' _; calculation
		& '},' _
		& '"pch":{' _
			& '"PV Vmax":{"label":"Vmax", "unit":"m/s", "value":null, "id":null},' _
			& '"PVAcc T":{"label":"ACT", "unit":"ms", "value":null, "id":null},' _
			& '"PV max/meanPG":{"label":"PG max/mean", "unit":"torr", "value":null, "id":null},' _
			& '"PRend PG":{"label":"PGed-reg", "unit":"torr", "value":null, "id":null},' _
			& '"PR max/meanPG":{"label":"PR max/meanPG", "unit":"torr", "value":null, "id":null},' _
			& '"PV maxPG":{"label":null, "unit":null, "value":null},' _; calculation
			& '"PV meanPG":{"label":null, "unit":null, "value":null},' _; calculation
			& '"PR maxPG":{"label":null, "unit":null, "value":null},' _; calculation
			& '"PR meanPG":{"label":null, "unit":null, "value":null}' _; calculation
		& '},' _
		& '"tch":{' _
			& '"T Anulus":{"label":"Anulus", "unit":"mm", "value":null, "id":null},' _
			& '"TR maxPG":{"label":"TR maxPG", "unit":"torr", "value":null, "id":null},' _
			& '"TR meanPG":{"label":"TR meanPG", "unit":"torr", "value":null, "id":null},' _
			& '"TV max/meanPG":{"label":"PG max/mean", "unit":"torr", "value":null, "id":null},' _
			& '"TV maxPG":{"label":null, "unit":null, "value":null},' _; calculation
			& '"TV meanPG":{"label":null, "unit":null, "value":null}' _; calculation
		& '},' _
		& '"p":{' _
		& '},' _
		& '"other":{' _
			& '"IVC Diam Ins":{"label":"DDŽ insp", "unit":"mm", "value":null, "id":null}' _
			& '"IVC Diam Exp":{"label":"DDŽ exp", "unit":"mm", "value":null, "id":null},' _
		& '}' _
	& '}' _
& '}'

; data dicts
global $history = Json_Decode($data_template)
global $buffer = Json_Decode($data_template)
global $order = Json_Decode($data_template)
global $user = Json_Decode($user_template)
global $note = Json_Decode($note_template)
global $map = Json_Decode($map_template)

; XLS variable
global $excel, $book

; LZNT1 cardio bitmap logo
global const $logo_file = '0x57b1a0424d36c00002003600508a2800308004180100180048c30010007cc70e0000010c0340f80000ffff033f803f043f043f04ff3f043f043f043f043f043f' _
& '043f043f04ff3f043f043f043f043f043f043f043f04ff3f043f043f043f043f043f043f043f04ff3f041f021f011f011f011f011f011f01ff1f011f011f011f' _
& '011f011f011f011f01ff1f011f011f011f011f011f011f011f01ff1f011f011f011f011f011f011f011f01ff1f011f011f011f011f011f011f011f01ff1f011f' _
& '011f011f011f011f011f011f01ff1f011f011f011f011f011f011f011f01ff1f011f011f011f011f011f011f011f01ff1f011f011f011f011f011f011f011f01' _
& 'ff1f011f011f011f011f011f011f011f01ff1f011f011f011f011f011f011f011f01ff1f011f011f011f011f011f011f011f01ff1f011f011f011f011f011f01' _
& '1f011f01ff1f011f011f011f011f011f011f011f01031f011a01ccb202ff6901c6c6c679797900444444232323222200222020201e1e1e210421218005282828' _
& '48480048909090cececee73ce7e7ffca7f207f107f10ffff00d7d7d76868682b2b042b0029003838386a6af06ad7d8d8bf207f107f107f10033f082e049a9797' _
& '06040401a62e01000008060604000101050202050303e8030101a003040204a00100013201400305050301a6060200f000949292bf0f3f043f043f041f3f043f' _
& '043f043f043c0492909018110f0f6028a027040202f1e02c070505602ec001062b1501c3a030823301020101a006c304f16007615f5fff123f043f043f041f3f' _
& '043f043f043f043004e0dedef82523238326a05d435dc301a30000414040858585b1b000b0b4b3b3b8b7b7bb00bbbbb7b8b8b4b4b400aaaaaa7f7f7f2d2d7e2d' _
& '89056364c0376067e002403985fc8383ff123f043f041f021f011f017f1f011f011f011f011f011f011f017ac47878d3130b09094013d62e002929298c8d8de5' _
& 'e58ee52f031f011001ddddddb01818373737d3045000090707810605161414d5d4d48f03ff1f011f011f011f011f011f011f011f017f1f011f011f011f011f01' _
& '1f01100143fc414180123017b042702bb0002000c0535151e2e0e0ff021f01e31f0113016a68687034d3049005e35018b3008d8d8d2f031f011f01ff1f011f01' _
& '1f011f011f011f011f011f018f1f011f011f011c014947476011078012f01123122e2c2cd4d21ed28f031f011f011f01787676c763172318f31d5151519f021f' _
& '01ff1f011f011f011f011f011f011f011f01ff1f011f011f011f011601b0a2c011c059e3200033479f9d9dff021f011f01e31f011901363434800620067079e3' _
& '307ab0003030302f031f011f01ff1f011f011f011f011f011f011f011f018f1f011f011f0110013b3b3b70100390175342121010dbd9d9ff9f021f011f011f01' _
& '1f0130ade00620008803040423183232326f02ff1f011f011f011f011f011f011f011f01031f01150177b202ff39008585850000004002030306050500102360' _
& '2121dfdede3aa2203cdc6cdada006b00020602000008571c57575d74ff2f8e40d8d8d881807d0202020404040004c0010000ecebebe653401c41800003010203' _
& '02401e00789e9d9cbf1e7f107f1067100f500f0f0101c13e0502bfe9bce9e97f1f6a10c01e800007801fc40303c062e4e2e13f203f088f3f043f043f043d0480' _
& '8080401ee3205f835fa6a6a67f0a3f043f04112904d7d5d460100200008203c0300000373534ff077f3f043f043f043f043f043b04832f03f1024f444444df09' _
& '3f043f042f0408898787201108060506e2044160aeacabbf083f043f048f3f043f043f043504707070a01eff20bf400000011f093f041f021f011f019111012b' _
& '2927300805037030f0001513134f021f011f011f01ff1f011f011f011f011f011f011f011f018f1901f00e905fc32f818181cf023f1f011f011f011f011f011f' _
& '01cac88ec7f008d0172318a3a2a13f02ff1f011f011f011f011f011f011f011f018f1f011f011f0113019f9f9ff00effa09f500020006f021f011f011f011f01' _
& '471f011f0113013f3d3d900805f1c250302d2c6f021f011f011f01ff1f011f011f011f011f011f011f011f013113012b2b2bc00e93477676fe766f021f011f01' _
& '1f011f011f011f01111301d9d7d52009060404ff83786f021f011f011f011f011f011f013f1f011f011f011f011f011001d0d0fed0900e2000f047908f3f021f' _
& '011f011f1f011f011f011f011901272525895009070591c88e8d8dcf02ff1f011f011f011f011f011f011f011f01471f011f011f01969696600e04f1923e1f1f' _
& '1f0f021f011f011f018f1f011f011f0119016c6b6a8009712348676666cf021f01130149b302ffaa002a28280000008806040400059b999987bb28c7c6c4024c' _
& '0380021a180017716f6e92908fee0cecebff50ca4001000004e0020207050580393f167f10814010c0bfbe454242c02388060403c2260404028029e700048100' _
& '40049b9aff897f2a7f1070ffc2c1c18034403440012c8c2a2a7f147f105351508011094000030100430103010181c013050302090706000103a000a3030f0d0c' _
& 'd2d1d03fdf0d3f043f043f043f0433048f8d8e8dc019e01aa0004c4949df08c73f043f0438041412112011202f3c0806a12d60014c0000310705c603a003e302' _
& '908f8eff0d3f048f3f043f043f0430047673730019c4050361ac7a79797f083f04473f043504432a050301865c50004d4c7d7c7cb1afae00bfbfbe9997966d6a' _
& '8e69262f409343927978775f0e1f3f043f043f043f041d02413e3ec7500f303e5000bab9b90f041f011f1f011f011f011f011c011414141130080a0807a35e34' _
& '323100eae9e8e7e5e4b8b700b669676659575694009392dad8d7fffffe188d8b8a0032c002080604f19323ccccccff051f011f011f017f1f011f011f011f011f' _
& '011f01100112e01010020000f3170f021f011f1f011f011f011f011c0174747431f014070504502d80006c6a626a0002706e6eb0002c002f002d2ceeedece2e1' _
& 'e08f8048900b9053c00b1818180c05ffef001f011f011f011f011f011f011f01ff1f011301d00d200cc3a73f021f011f018f1f011f011f011901e6e6e6431611' _
& '932f5b5958d0010c0a0a0f4001e0184019100a0b0908040c020030179302a6a5a4ff1cfefdb300d0018000898989ff3905bf001f011f011f011f011f011f01ff' _
& '1f011f011301230c53003f021f011f018f1f011f011f011901717171000888050505f05c171514a001f8161413100190172000b02160170f20004061e000f65f' _
& 'dbdad99f149d9c8103037030001b1bfe1b3905bf001f011f011f011f011f010f1f011f011f011301c4c3c2d000cececfcdccc7c6c57f3f021f011f011f011f01' _
& '1f011901160c15156014632cadaeaca0a4a09fe0000102c3a70030177f7031005f2018e030800050000002284426254004211f1fb00003f1f283bdbdbd6905bf' _
& '001f011f013f1f011f011f011f011f011f017e7e007e5e5c5c676565680066645b5959d3d2d10f3f021f011f011d01b8b302ff2b00070606020000110008090a' _
& '0800e42c2d2b000000000305020502e00105030204020a0310031629000a030100440000586260125f01580303000a999999630022a504aaaaaa805909012844' _
& '27266f5eb1b1b1804106620401a03a3a3900400007031900b1010080b914010103018101c0807e7ddbdad9801784020280de005b5b5bef5f11761c3d3d3d402e' _
& '07050523c03e80000806048003d2d2c6d2bf306a10a1a1a1c01d80ba314001424241c00e810306057c0303c4bf8f600067002c80095ef45d5cc30b0182634034' _
& '8003bf00837f103f08ffff1f1f1f211d8d027c08e01d227acecece7f07c73f043f042604a3a3a3c010402a31a000434443e00200010203be01e38fe002400046' _
& '30620101a00091e32f656463e30503048147f83e3e3ec0015f003f043f043f04d13d04262626201d04c27c201a3f0001c001ff5f1f0f3f042904b9b98ab9c110' _
& '02c13f2c2e2c400373c001e12f0403802c4300c1130209618e0604c0c10209070601824500b5b3b2b7b5b4e3e205c197686868290b7f013f04c73f043f043404' _
& '2525252017e32f1f004cff2f3f0d3f0432040b0a0a8b201121280041ea5b5c5a0113340403cb5e02c001c0be07056180c3020806066004a00948144746000103' _
& 'e2efa0a0a0fff20b4f011f011f011f011f011f011f01ff1f011301f92fa00d3026800cff2fef031f1f011f011f011f0116011213130404020230000086868588' _
& 'e7e8e69008000100632f3fb3095000302f7352306b0002716f806efffffe110f0e930bf11001bebebe5f061f011f011f013f1f011f011f011f011f0116012525' _
& 'fff747330e200cff171f041f011f011f01e31f011601999898a007b0156047e3800070018889878000200070a63fb00950484016c21710a9b1472e2ce22a6002' _
& '575554300210315000f81d1d1d10012f001f011f011f01ff1f011f011f011f011f011601ff2f500c7fff171f041f011f011f011f0119010d940b0bd0070452a8' _
& '1e1f91143892929010012000e0160302300106050433a710014b4aa249b003a09f9fd30106c277ffcf47f905bf001f011f011f011f011f017f1f011f011001d0' _
& 'bef00b0326f82fd17fcf021f011f011f011f011f0116018b648c8cc0080404704891bc2e002e2ffefefeededed184747477001260016161688b4b4b550039a9a' _
& '9a4301fe068260b024a6048f001f011f011f01ff1f011f011f011f011f011301ff17100dfcd2d2ff170f041f011f011f011f01f11a012828280008f314800020' _
& '00087f7f7f3f03c3c3c33344333303020505058300ebfcebeb9f021f011f011f011f011f01031f011b0146b302ff210028272600000040030100050302000804' _
& 'c402010038d2d2d122f05348082323230083040404030c0303000803020f0f0f520052525a5a5a2b2b2b0c010101a4001705050509c409090320bcbcbc78b336' _
& '3d782b2a29805f86bf00040007dd44deddfb65303030802107e00707060606465840048300780202028060005f0368406aba1cbaba3f2c7f106d10c5c3c2c012' _
& '100f02000080bdc9bfc0656463dddcdbff237910f87f7f7f065c805a00598000805d074001c00586c6353535ecec3eecbf2a3f083f043f0426048d8b1e8a6478' _
& '888f4930601c1d1b1b78b6b5b49f0a3f043f043504726072722e2e2e80114c0010001010585858d3d3d33f5f0b3f043f043f043f042404b5b38eb2605ec31900' _
& '2e06040340008fe95f2302806263043a3a397f0b073f043f043804dbdbdbc9c900c9a5a5a59c9c9cbe00bebed7d7d7ebebeb3f3f0a3f043f043f043f0427046a' _
& '680268a32a060404070504f1802c0806060001e92f60012002880a0808a000080605e005f1e0adc3c3c3ff0c3f041f021f01ff1f011f011f011f011f011f011f' _
& '011f010f1f011f011f011f01ff100e0d63c0149017030101402ec2170407d0168000b7480000050201cb10018078044091020150885003f120007374744f051f' _
& '011f011f01ff1f011f011f011f011f011f011f011f01ff1f011f011f011f011f01160133140047d3801550000705d02f02c0177301801111112a2a2a23829ff1' _
& '1001040304206f602f606ec01a88090706031a6b69692f06ff1f011f011f011f011f011f011f011f01ff1f011f011f011f011f011f011f011f01ff1001201520' _
& '0030149017902f6017503003b345b0159c9b99e6e6e6818303cececf666666f30218080808f186001800000b8c0907e04870017a77769302ff5f001f011f011f' _
& '011f011f011f011f01ff1f011f011f011f011f011f011f011f01e31601c3140503030017c02fb045632018f32c7b79798f0313011f041f1f8003060707040380' _
& '020907050200019062f808060440015f304f041f011f01ff1f011f011f011f011f011f011f011f01ff1f011f011f011f011901e012200092171e01602f2000b0' _
& '004301b5b4b3e3bf0319014848489002602f201b8f50035000c03253307e7c7bbf03ff1f011f011f011f011f011f011f011f0183b302ff7d0024222100000000' _
& '06040406040307058004030100080605001140050302bfbdbc219d63046464002f0705030301e2010035040201004d0008001438b9b6b57ddfff3f98403d3dfe' _
& '3d4049c05c004d8000805040014004118000dfdddca72e6f6e6e23800cc00e04020283600907c60700740005e0dedee7117f0ac77f107f106410555654034d40' _
& '4c0fc04a8000c0bf4004030201d844d7d6ad21605f5dc00e021a0080cf04436143130c0909ffad12ff053f043f043f043f043f043504489c9e9bc0250101208f' _
& '038f832fa03020024000c2c1c0ff0ab131044e4c4bc007a20904802fe3c09143302525251f0a3f043f041f3f043f043f043f043d04d0d0cfc100250405040203' _
& 'c185202f0540000340020000c3c2c1e3ff0b37042f2e2ec008822f200b21006101080606200283831e83df0a3f043f042604999999ffbf053f043f043f042e04' _
& '00224000a023f20520be0201507730471001cf17c7cf051f011c01161514a004300510040302066000020207f1027da6a6a6bf031f011f011f01231f011c0127' _
& '27273008c7c7fec79f021f011f011f011f011f011f01231f011001232120b009070535d02f01601706f22910019d9d069dff021c01ececece5e546e56f021c01' _
& '0f101000050108010104500604040907e321301001cac8c6bf031f011f01471f011f011901171717e00685fc85856f021f011f011f011f011f01631f011f0159' _
& '5a5a8009502f0925f0a20181a20202307300820c8282cf021c01eeeeee13e41313e003d6d6df79dd0363056c0506d06060ad06f04d800312fc10107d02ff001f' _
& '011f011f011b01f1730a6d6d6d8f021f011f011f018f1f011f011f011c017f7f7f401031c0170b09088000505a050462048000686868bf031c01d08cd0d09002' _
& '2600bbbbbb2f03111901cacacac002030303c004030305030120304091f110012623238f031f011f011f01231f0116010d0d0db0064d4dfe4d3f021f011f011f' _
& '011f011f011f01311901a3a3a32009200004010e0100bf2018712f00004141c6418f031c01aaaaaab103d092853045017303009090908f03111901a5a5a55003' _
& '030102471007a0c160dd0a0807100163fc61608f031f011f011f011f011301c4080801263434340f021f01ff1f011f011f011f011f011901a028b00f1e0471ee' _
& '318f0011e000292627ff5f031c01861b501be07450755000b003312000777575ef03190172731e73600280a8f32f20300100000818161537027ab502ff4f00dc' _
& 'dcdc030303c000000023232350bc345208060606009204040405200302080605000b1210220f1e4b8a8a8a831a06075006050201030104000403880207050128' _
& '605e5e1b22086c6b6b80200c0a0a0620040304020280053a38c6379e3b3910c5c5c5803200011c0f0f1f70da440617cdcdcd51c002525252402501c000003000' _
& '060404460715025d5dae5dc00a806c400102c15c01c06e1f8000c05f0353c00280063f3e3d319b125856548009c31d72706270000b9693929b0c640702200202' _
& '4f4f4f0c0ba6a6faa6811b01011ce411bf095b10c02388626262c008818181c00218141110db0ba0034646463120050101016079403003031204815f0302e92f' _
& '0301011143692827271b0a4b484811c021a7a5a5c00435333231200b9491915b06be0358582258e0082424242c059292fe92e0022017a0009e081f043f043c04' _
& '18151616201140001b1b1b114005d3d2d01c06ffff3d043d3de005010102060708070202c02c01020303e7e02f238fa00003012068e08922628e02214d830b3b' _
& '0bbbbab9c00a314600d5d4d23e111504d9d98ed9e008e05fa000d6d6d6c904ffe32fe0024000d507ff023f043f042004584f4e4ec010a08d08e2bf88c48686de' _
& '062f2e2c4006e35c47022e812c0001070505c28e011f20bf0301a300620401bb151312719b0bd5d5d5200b4000e3e315601515fbfcfcfe1112044d444d4de008' _
& '131313a000be44bebe69047f7f7f800247c44747a000c6c6c6d2079f028f1f021f011f011b01a09e9e3008c5c01705f2804240401f031c018832303020030503' _
& '015003f7e3158018952f03d0464001d004410147b2488300d0170b090880031b8c19192f061901939393600223f3178000565656d601dede02dea08bdddddde3' _
& 'e3e3032903b900ebebebf1f1f1235000b003090909a3766b6b226b39025f5f5fd0019f9fe29f5000787878a901bf001f01ff1f011f011f011f01100100082000' _
& 'e043315000100d0d3f021c014544d244900207053092034016832dff5318f12db0012800d0012000d3015000c7f0028003f0011c1a188f061901f1a32b070707' _
& 'c304f37db3005600c0393939c1c1c15903a019182c2c2c535d63027e7e7e230002b0001f1f1f99023e3e223e4001d3d3d35000121200126868685e5e5e5a005a' _
& '5a5b5b5b7a7a7a239902b600666666f06e2f2f002f2a2a2a202020163816160c0200201ee0003333fe332c4e4f041f01d02e0008209f539f98d6d5d53f021901' _
& '4c4c113dc39014220004060402e315e00047d05ea004c9020f0d0c100105dc0202c202c01ae0a8036002304af17001212120c902bf00601160021196176a6a6a' _
& '5012646464c07070706f6f6f8000d0018120002d2d2de9e9e9e0038898989813013a3a3ab0127f809980b163057001a012b30053001910191910100186909090' _
& '83530350000b0b0b0808113a3f5000c902b000a0010302401f37378037353535343434301788292929901d1c1c1cb0008fe0665c03ef001901c2bfbf30053b90' _
& '17635f80a2222f0316017676a276f0020504043214047046ffc317e0451016c32fe9030002f1052048f8040205921ab0068036b24ee102184e4e4ef902bc00d0' _
& 'd0d047e003d07323187d7d7dcf02508c505030022000595959500011f0cbdfdfdf6f02222222f1d001d4d4d4a601e000002c9f02d11001cbcbcbd0012378d900' _
& '1d3f10011c4cbf031f011f0119011e1c8e1c600530415000131111cf02511901b1b1b1600203c01702ff302fe18e50181016f01480602018ff170c090ab12401' _
& 'd504010204f0010302023062901a501bb003e205b27e8787877f07160130418f400720188fa23602b5b5b53002ff2000c01746018c00f032000230bf760131e0' _
& '002626266c02e600adade2ad00022828281001702eb0003f396866028f001f011f01130181808e806005d013c32fdbdada9f020115012cb500ffd9d9d9000000' _
& '02010000030303020206030003080605020000090007060402020402011700080038008cff08000405031100440304020308040301cc05030458016404040098' _
& '004078bebebe096a0c1600e600460644060600054040401529798c7979151a0017ababab003e188484840623000e33333363060e0f086b6b6b002303026a1c6a' _
& '6a9814330d802c030101880705050004646262182240f9f9f91d1d1d001307480707040000030300ba037c010000c1000a0c0189238f0e0444010000c1060403' _
& '80020318030405823e0029e5e5e5111540b4b4b48023010101310362c5c5c5550ad805c1c146c10011866ffafafa8003340434349b127676762a2af02ab6b6b6' _
& '9b097007408200202605c09fc03500005b105d5d625d000b07080800a1800b010584bd0100021d1b1ab6b600b5c2c1c1bfbfbebf20bebebbbab98912bfc00580' _
& 'b6bd8106bfbecdcdcc68424140021d02c05f40700547c05d82000005393939d8202b242b2bc008060581c03e3e063e580a9506e9e9e91010461000110308dddd' _
& 'ddc00244fc4444d50bff053b0883112089c010888180809805c8c9c9600421402d06050403e08c03032207228f070504e0021a18c6181b0da9035b5a59400620' _
& '5f674300a06f01900202c00ae002a144a1a15509d2d2d10004018c020140050001efefee350531f80229292960070304b2b27eb26001bf8ad8095f033604237a' _
& '091c0909601040003b090e0e0ef96004050321bca300a05760bee08f1980321b19ff2fe60b59565517420944c0a1300220c2010502474169400338113f403e00' _
& '040762084160656664380555033a443a3a2008c9c9c900048ec48e8e60018c8c8c9505ff02633f043604373737a00f43006ffc6f6f3809409fc004a0b4402483' _
& '568fe0e60001802fe35f211f1ed807914c035e5c5ba109030243091fa700c16aa1f7e9e36c07afafaec7b003707c5000121311dc01ef00111f017f7f7fb0037e' _
& '7e7ec7a001500fb000aeaeae6f021f011f1f011f011f011f0116010f0f0fc7d007ef6c2f033d3d3d9002604a8ff6172330638f00140b0908501508605e5d5000' _
& '5f5c5b550c53524904e0005c5a595f045d5c200065636222203e1fd00467178818601da00119190e193f081601000201020003c1207c0000dddedc9f021f0111' _
& '1901c7c7c710045f5f5fe34001136dd2d2d20902bf001f018f1f011f011f011901aaaaaa6008e3706f5000262626cf021601436af7207a505afb2f03f02f1013' _
& '501833a7ffa004260009057901b3008003ff17311d62039404cacaca1904b9006724686640040506716755578e546f021f011901ededede00388363636400158' _
& '5858b0007fd901bf001f011f011f011f011c01641c6464a00750155000717171e3ff0216018b8b8b3002901af12fffa2bba0136017f25f97bce0002315a001ff' _
& 'f0020905001a1001d0013302000220001bc3025b0001a07df3384c4c4ca31904b900a5a6a4d0040461c7f0003132316f021f011c01206fe320b440014b4b4ba0' _
& '04dc01ef001f1f011f011f011f0119011212123d510c0451242039cf0216013535fe359002200010d7f847d173d0139314ff5000b01550002300c0020905a001' _
& '1001ffa00133023b175c6080ad2130a0a6190431b900d0d1cf01dd507f0000381c1d1b6f021f011c0143430243f008e1e1e1383838ff8000ff021f011f011f01' _
& '1f011f0116013f700726006f021901039bc0770302ffe0d2012f0f14b6158000200090051904fe0832aa5003ff17ac04104d10d6200046180fad1805141513c1' _
& '0b01f00002030140a9b906bf001f0108656565e003c0c0c025e025250a0a0a0f021f01130192b4c2ff47000000000102000010111baa1f1f1f00460505050002' _
& '020205030105030300050d020402010604030f000500020020002f7b79797f007d7c7775748f8d8dc0090706010000001a03232712410314013e0506003e0c0c' _
& '100ce3e3e315981d1e1c89801100020102c4c5c39b5f118f0e8a8a8a801c6b6b6bc01e1e1e2727272d1fc2178f015d820180aa1b282424240316e00403030502' _
& 'd95fc0500359fe03805bc30c4201800380008306400147835a52014007030303000d13e01313e7e7e71526c35fc07b31400ac2c2c1db2f4f07d3d302d3000e20' _
& '2020070707f8434343ad0fff0b4010002080002340c04001dfdfdfd8142d2b7e2ac00840468000954e8006c0b6064c04044001c0080301806901a30361000508' _
& '06054207034001e718110117c0770505801b007d98243819161660040072a000c6c48fff5f4f0900074300626262180d3f5f033f043304a30f00400001d7d762' _
& 'd7d808a19f9e60048023078c0504b527e002040202030411802c0a08074006242221f8312f2f00014003612b029735082502040120050102c18a6565e2655512' _
& 'd9d8d7000d8004e03bc00a0808dcdcdb98175503e3a01243006c6c6cdf073f043f04312c040f0f0f0010837d8f8ffe8ffb07402a801d582740036004a0000740' _
& 'bd202921280000f0efeef1c00a121010000d4003e002a90003c0014d000201040301048c0404e005f811a9a7a6000463009a4012272524380558034a8c4a4a80' _
& '0840007272723f083f3f043f042c04e03e0310a0002c2ce22cfb07adaaa9c00463b842139f802a8160f1141161b20001007246233132c002bcbab93305e1dffe' _
& 'dee0002000e303631a7d7c400422006300059002898989ff0816014a8c4847300293023e3c3c9f02631f011f01969696400420008cfc8c8cdf011f011f011f01' _
& '1f011f01711601bababad007c0772360cc8ccccccf0219017f7c7bf002cd593003308f10490302404321008e03f047a18b6002a9a8a7b903f8cdcbcb40012000' _
& 'b0607013c302580201001004230004a14903f15333515151b903bf0070044304718000bbb9b80f021f011f01ad8cadade0032000acacacdf01ff1f011f011f01' _
& '1f011f0119010080f01731f33e343434cf021c019f9d2e9c302c300b801207201303027c02033000400091007001200010201010c9c9c9af04d9d770d7242223' _
& '0002a0797094031e044100d04f200090ad07070863a0012000858585bf03190158e45554600205038108e036cf02071f011f011001dcdcdc0a0ae20aa004cfcf' _
& 'cf0f021f011f018f1f011f011f0119018686860008312618a9a9a9ff021f0173717e7150032f00701c0005ff0219019518939318a28bef03606060e36f98dc04' _
& 'b7b7b6800360173050f180007372710c02ef001f011601f812121240040f021f011f011f01971f011f011f0116d21006067443075f482f031301eeeceb999800' _
& '977a7a7a767676a01ca0a06f021f011901b2b2b201b003757575959595da8cdadacf021f01d0d0d0e0127f702fc31720483f021f011f011601cde0cdcd7d7d7d' _
& '0f021f011f018f1f011f011f011f01c2c2c2400d07206050308000111111d2d2fed26f021f011f011f011f011f011f01231f011001ececec716ab8b200000008' _
& '060504020180000000b5b3b2ffc2000869696900ce0808080204020200080d0d0ddcdc02dc8ad9d7d7d705050523804d80500403040004706f8e6fff507f2045' _
& '1055555500356007070701018196c002a81ca8a8bf177f104010d0d0d063c023800004040440280002523c52527f167f107f1049105353465380368000060606' _
& '03024dc44d4d0008ebebeb89097f01073f043f042004aaaaaa2121c6212011600135353500010313f840404020025f003f043f043f04c73f043f0426044c4c4c' _
& 'c01c406081c34c858585c4c4c4c091c0484848e2e2e21f093f04033f042004c6c6c625252503201143009b9b9bc0c0c0f163015858585f083f043f043f04c73f' _
& '043f042f047e7e7e231dc02e31a0033c3c3cc301a0003f3ff03fc7c7c74f063f023f042704f87d7d7d230ea05de3d16031c003f180029c9c9ce7043f013f043f' _
& '043f3f041f021f011f011f011701d1d1e2d1c00e71717120018000e030ff2000a310e000d058a7029f001f011f01e31f011801121212500600381007f8030303' _
& '7307b0484f031f011f01ff1f011f011f011f011f011f011f011f01c71f011f011001e6e6e6500053578f8087701053009011a4a4a4a0011f2f001f011f011f01' _
& '1f011e1e1e1f500660171007800020002c2c2cf8e4e4e49f021f011f011f011f01ff1f011f011f011f011f011f011f011f01f116019494941310500053308000' _
& 'f8afafaf2f031f011f011f011f013110019d9d9d500623001515f815b2b24fbe7f031f011f011f01ff1f011f011f011f011f011f011f011f01031f0111018080' _
& '80292929f103116161614f021f011f011f01031f011601d9d9d95f5f5ff8cccccc3f021f011f011f011f01ff1f011f011f011f011f011f011f011f01c71f011c' _
& '0110d0dedede6f021f01ff1f011f011f011f011f011f011f011f01ff1f011f011f011f011f011f011f011f010f1f011f011f01150103b002fffc0f03b002ff32' _
& '00'

; LZNT1 QR code bitmap
global const $qr_file = '0x9ab1a0424df2b20002003600508a2800307b04180100180048080000bc007cc40e0000f7010c02400010ff6d01ffb97f7c7f10ff7f106910ff5cff2b7f107f10' _
& '3f083f04ff3f0423047f2e3f093f043f043f043f04ff3f043f043f043f043d047f2e7f0c3f04ff3f043f043f043f043f043f043f043d04ff7f2e7f0c3f043f04' _
& '3f041f021f011f01ff1f011f011f011f011f011f011f011f01ff11013f17500140012f001f011f011301ff710532000f021f0116015f0316018f00ff1f011f01' _
& '1f01df07df075f031601cf02ffcf023602cf0279048f038f031f011f01ff1601c9056f021f0113015f0316018f00ff1f011f011f01af071601cf021f01cf02ff' _
& '3f023602cf02c602a0018f03f6028f00ff1f011f01c905df011f0113015f031601ff8f001f011f011f01af071601cf021f01ffcf023f023602cf02c602a0018f' _
& '03ff02ff3f021f015f031f0116018f001f012f06ff1601cf02cf021f015f033f023602a601ff5f031f0116010f051f01c0024f011f04ff3f021f015f031f0116' _
& '018f001f012f06ff1601cf02cf021f015f033f023602a601035f031d0126b2fa000700ff200000b40f9406842080ff07440f6a1811061a1808187d0f35182cff' _
& '060da11a8611981a8f238f1a061f0f04ff0016120a0322060d030792028f11a11aff8612060b21021220150506140f08aa06ff330b460d0f02c0231205c32986' _
& '068303ff5201cf08610d8612060b210212201505e706140f085f03ffffa6069f059105ffa6060f01200b9202230e4603c301b200ff6f04bf06080986051f0148' _
& '1b32118c029f060a8f055f03d128ff080000260bff1801e008af03860b460326020f016f04ff380246031f01312ca606c6103f022816ff8f0588034d01380bf8' _
& '0846031801200dffaf03c60f460326020f016f0438024603ff1f013f175824660876041f011601af01ffaf011f019f051601af01e6033f021f01ffc0024f011f' _
& '0416018f00e603a6011f01ff16018f001f011601bf06af011f011f01ff8f099f051f017f041601af01e6033f02ff1f01c0024f011f0416018f00e603a601ff0f' _
& '05af013f0236028f00160156033f02ffaf015f035f035603ef03cf021f015f03ff3602a6018f0030024f018f0316018f00ffe603a6010f05af013f0236028f00' _
& '1601ff56033f02af015f035f035603ef03cf02ff1f015f033602a6018f0030024f018f03ff16018f00e603a6010f05af013f023602ff8f00160156033f02af01' _
& '5f035f035603ffef03cf021f015f033602a6018f003002ff4f018f033f021f015f033602a6018f00ff1601cf021f01ef0336028f00cf0236023fa6011f01af01' _
& '3602cf02a80111b29aff0c000005000dc0ffff0064ff125003620f3418220364000a0f46061aff1808063506230f110f3e06230f081816ff060d861a1816982c' _
& '0f0d86080f31090dff8605090a03190f0d98089b3246071502ff461606084f04cf0ec6080f02180b8606ff460d180b58168f0646048f188906c602ff0905cf20' _
& '67040f1458048f15060b8606ff4f044f0d58043314bf06480e8f058603ff460369049202e8095f012c040f0a3802ffaf0b860546032f02af0638021f0a9107ff' _
& 'bf06a8068f058603460369049202e809ff5f012c040f0a3802af0b860546032f02ffaf0638021f0a9107bf06a8068f058603ff460369048f023f023f04210488' _
& '125601ff38093f03cf023602af01ef031f015f03ff3602af0116017f045f03ef03e903df01ff1f011f011f011f01bf091f015f031601ffcf02cf023602af01ef' _
& '031f015f033602ffaf0116017f045f03ef03e903df011f01ff1f011f011f01bf091f015f031601cf02ffcf023602af01ef031f015f033602af01ff16017f045f' _
& '03ef03e903df011f015f06ff3f023f021f011601e6031f0116018f00ff1f0116010f05af011f015f0336028f00ff1f01e6037f04af013902df011f01ef06ff3f' _
& '023f021f011601e6031f0116018f00ff1f0116010f05af011f015f0336028f00ff1f01e6037f04af013902df011f01ef06ff3f023f021f011601e6031f011601' _
& '8f00ff1f0116010f05af011f015f0336028f00071f01e603830005b2f0ffffff00050000b015200088fb0f6805dc00156a092e0f5806220f08ff0638211a0965' _
& '270b3374862f061f8f08ff0f0d86112a0480238f172a2e0f168608ff0f04c61aa1060f266104331d4616860fff4f048f06c6082a02c011cf0b2a170f0bff4604' _
& '0f02c61aa1060f266104331d260bffc6072f024f0366041f012804e008f805ffb80c46030f010f0a66047f0dc8098605ffcf07a80444012f0b6604ef084f036f' _
& '04ff26021f012804380ba604600428064d01ff380846030f010f0a66044f032602f808ffcf0798050f0a5f0c26049fe048055101ff4f15af0460045107640238' _
& '0846030f01ff0f0a66044f032602f808ef03cf029f05ff5f035f035f035f033f021f011601ef03ffcf0230024f01160116048f001601ef03ffef031f010f0536' _
& '02cf02af01ef035f03ff1f011601af0106053f02bf06cf020f05ff7f043902df01d9011f071c01ef03ef03ff1f016f053602cf02af01ef035f031f01ff1601af' _
& '0106053f02bf06cf020f057f04ff3902df01d9011f071c01ef03ef031f01ff6f053602cf02af01ef035f031f011601ffaf0106053f02bf06cf020f057f043902' _
& 'ffdf011f0116010f081f01cf021f011601ffaf01af013f024607cf02cf021f0aef03ff5f031f015f033602cf02cf023902b600ff8f001f01a6048f0016015603' _
& '1f011f01ffcf0216018f00e6037f04cf02cf021f013f5f033602a6015f035f03c702feb1fa000d00ff0e0000840f5018440da2ff111e067c06381811211a0f23' _
& '0f590623ff182c861a181f0f0d86080f0d213a9211ff2a1c8f3bbc08860f2102862a180b9833ffa10f4616180be111c6080f0280181205ff861e0302c608c605' _
& '7f04861227020f1d7fcf0ec6080f0b4f04580f9805ff0800fe0066040f01800e92028c116604e602ff3f02e80eb80646031f01110aaf060613ff3f145a0ecf07' _
& 'c60558036f048605a906ff92026307c9042c024f030304bf002b04ffe6080f0a2f028f0b66049f054836af063f3802860e6f0458031b0a5f09ffffffff0e2604' _
& '1f012a04bf0fd807bf05ef03ff3f021601cf021f011f01ef033602af01ffef031f0150034f01af041f015603a601ff8f001f011f01df0736022f06ef03ef03ff' _
& '3f021601cf021f011f01ef033602af01ffef031f0150034f01af041f011f017604ffa6018f00bf061f015603af0116019f05ff1f01ef031f011601ef03cf0236' _
& '025f03ffcf02cf025903ff02ff021f011f013905ffd6018c00bf061f012603af0116016c05ffef001001ef031f0116011f04cf023602ff5f03cf02cf025903ff' _
& '02ff021f011f01ff3905d6018c00bf061f012603af011601ff6c05ef001001ef031f0116011f04cf02ff36025f03cf02cf025903ff02f6028f03ff89036f0213' _
& '010f059f023f021f011f01ff16010f051f01cf021601af01ef03cf02071f011601eb03f7b1fa000000ff170012e800500c080f80ff0f46062221580f232a1118' _
& '7d0f868f08ff8635060d0f04bc47181f80358f0e2140ff8f11860833284f0d5804581f8f214f04ff461686060f02581f8f06aa0f000b2117ffc614060b4f04d8' _
& '112a0bcf11860fd8117f8f066104660d8f0558038605bf0600fe00e608090a8f022f028f0bd80ddf07ff2f043a02660d980e4f033f02880e8f05ff8603f808bf' _
& '067f2e88104b01f80e7606e708037813df07ffffc607f8084f03ff3f023f142104f8084f03460a5b03c604ffff05d11f860b0f012f0b3f022804060aff5f03af' _
& '013f023f021f015603a6013f02ffaf013f023f023f02b906b60049012303ffaf01a6048f001f01ef031f011f011601ff06053f02af013f023f021f015603a601' _
& 'ff3f02af013f023f023f02b906b6004901ff2303af01a6048f001f01ef031f011f01ff160106053f02af013f023f021f015603ffa6013f02af013f023f023f02' _
& 'b906b600ff8f0016011f041601af011f017f041f01ff1f0176040f051f0116018f0016012606ff8f003f021601af01ef033f023f021601ffc002df011f013f05' _
& '1601af011f010605ffaf011f0116018f007f041f015f031601ffc6028f003f021601af01ef033f023f02ff1601c002df011f013f051601af011f01ff0605af01' _
& '1f0116018f007f041f015f03ff1601c6028f003f021601af01ef033f02f7b1e2ff170000000018e80f68005eff1e042a6a062c0f56181a2a2c21628611ff0f16' _
& '330d8650121f0f0a98080f768f08ff0f1f981a060bd811980f8606f311460dff0f024f16c608a106db088f1b58048612ff18028f0f210bcf08c611980f860618' _
& '0bffa10666048f055f0328044f15d20792023f6307460358094603ff082f04ffffffd807d1057f020f0a26025f033fad0110ffef08c61246037b04e6050f072f' _
& '024f09ff9b0ba303e6080f01d807b80658030f0aff26025f037f2e210fef08e61146037b04ffe6050f072f024f099b0ba303e6080f01ffd807b806af0116010f' _
& '051601af01af01ff9f051f017f0436020f05ef0330024f01ff1f011f01cf051601c6023f023f023f02ffbf065f032f063f027f041f015f033f02ff3f023f0216' _
& '01cf02cf0230024f011f01ff1f01c6058f00c602af0116013f02af01ff3f021601af01ef03cf021f015f033f02ff3f023f021601cf02cf0230024f011f01ff1f' _
& '01c6058f00c602af0116013f02af01ff3f021601af01ef03cf021f015f033f02ff3f023f021601cf02cf0230024f018603ff8f00160156031f010f051f015603' _
& '8f00ffc602a601ef03af011601af01af012f06ff3f023f023f021601cf0216018f005003ff4f01a6048f00160156031f010f051f01ff56038f00c602a601ef03' _
& 'af011601af01ffaf012f063f023f023f021601cf02110108b2e2ff13000000000fc000501e08ff066a06520f8e1822185f063518590f1aff06113c1a211f8611' _
& '18169b7d8f0e0f25ffa111861a18048f234604460d4f048f06ff580d980fc6112102a118c6082a0b401fff360e432e8f1bc3055201cf1a8f0f4f04ff86128606' _
& 'cf08980652221e055f0c4f0efcffffc60a910364026004af031f07ff910ba60618016f0d2602a6062f024f03ffb806d807e6081f0148ae8605260b1801ff9f05' _
& '42275f093f042a04e60e0f105f03ff2804860a6602ca0c9f012404cf072602ff1801c60b66042f02cf07b80649036601ff1f013f0421043f112804460abf06ef' _
& '7effc6038f00180196053601bf061f01cf02ff1f015f033f021601a9014f011f011f01ff1f0116019f08af013602af01af011f01ff56038f001f01ef0316018f' _
& '0016017604ff1f0116018f005f031601a9014f01d901ff63051f01ef061f011f017f041601af01ffaf010f055f033f021f0116012f061f01ffef033f023f023f' _
& '021601c002df01d901ffd3041f0173015f001f0119017f041601ffaf01af01cf055f033f021f0116012f06ff1f01ef033f023f023f021601c002df01ffd901d3' _
& '041f0173015f001f0119017f04ff1601af01af01cf055f033f021f011601ff2f061f01ef033f023f023f021601c002ffdf01d901d3043f0273015000af01af01' _
& 'ff3f021f011601ef03cf021f015f033602ffaf011f01cf021f015f0316018f00e503edb1e2ff0f0000000010a805480074ff03080f8c33340f472a59183e2a8f' _
& '3316ff8f1a86080f041b55456486230640982cff180db30f580d8f06330bd8118606cf08ff4f3ac0081205c60e1502580d8606c60eff0f0b7c045525c905a118' _
& 'c60b86052908ff6301ef086f042602ef08d2079202d80aff4303b806460386088f053f023a04260bf318015f0cffffc60786050f0aef08ff6f042602ef08d207' _
& '9202d80a4303b806ff460386088f053f023a04260b18015f0cff7f2ec10bef089f0e310be608c0076f0aff3f023f042a048614a60226024f036f04ffbf061602' _
& '88002f065f02df071f015f03ff1f011f011f0116012006df011f011f01ff1f011f0116018f0c1601af015f031f01ff5f033602cf02cf023f021f0116018f00ff' _
& '1f011f011f011601f008df011f011f01ff1f011f0116015f0f1601af015f031f01ff5f033602cf02cf023f021f0116018f00ff1f011f011f011601f008df0146' _
& '0a8f00ff1f011f01c905d3011f011f011f011f01ff1f011f011f011f011f011f011f019f0eff1f011f01760409054f018f031f011f01ff1601c90543011f011f' _
& '011f011f011f01ff1f011f011f011f011f011f01060e8f00ff1f011601760409054f011f041f011f01ff1601c90543011f011f011f011f011f01ff1f011f011f' _
& '011f011f011f01060e8f00071f01160170041cb2e2ff0b000000000c8800380050ff03080f681844186a18342162063e0f47ff0f110650182c060d9811982306' _
& '0d1804ff8f2c0616000d0f1c98170f168608981aff33284f16cf115816180b8606d808e135ffc6080f024f16c6088006ea0b0f0b4604ff5b194307980f980646' _
& '160602060b4f043f9806060b0f02610d66041f01ffffff460c8f054003920243064603c301b200ff6f04bf06080986050f01a6045f032804ffbf0626041a0146' _
& '0aa6042f020f08b806ff490366018902a3092f02bf0c08c48f05ffd807660d8f0e5f032804460cb806cf10ff2f02c60746032f02bf06d4e546096f0aff2f02bf' _
& '0c7f2e6a08460c0f01e6045f03ff18025f03c601a6018f001f015f031f01ff5f033f021601a9014f01a6046902ff05ff13013f021f01b603af01a6013f02af01' _
& 'ff1f0106058f00c602af017f043f021601ff7f04ef033f021f010905b60049012303ff1f01a60486003f021f01cf0216018f00ffef033f021601c6028f003f02' _
& '3602a601ff3f027f043f0216018f002f060f055003ff4f01a604a60116018f003f021f015603ffaf010f053f023f021601c6028f003f02ff3602a6013f027f04' _
& '3f0216018f002f06ff0f0550034f01a604a60116018f003f02ff1f011601af010f051f0116017f04cf02ff2f06ef035f035f031f011f017f043f02ff1601a901' _
& '4f01a6046902ff0513013f02ff1f011601af016f051f0116017f04cf02ff2f06ef035f035f031f011f017f043f02011401dcb1e2ff070000000008d0045000a0' _
& 'ff0308066806440f200f4618220f341859ff186b1847451a8f23982c0655981a090dff8605090a03220f0d98088f3b2a1f6116ff8618e11a180b980f8f06180b' _
& 'e12ccf08ff00141205031a8f065804830c40016a0dff210b46160f02980f180b86068f0f4f03ff9805bf0fd488ff0e580b48037f13ff08ff3304260b0f01580a' _
& '98054603cf074f03ff9805bf0f7f2e6408a60c1f0131042611ff8f0346031801a6066f04180a5f03c81fff8605580c46032f0b3f022804520c9202ffdf0a3704' _
& '060a4f046f0d2f02a6065803ff3f021601af011f011f01b606af011601ff8f001f011f015f0c30024f018f031f01ff1f01160106053f02bf061f017f043602ff' _
& '0f05af01ef031f011f017f041f015603ff8f001f011601760409054f011f011f01ff1f011f011f011f011f011f011f011f01ff1f011f011f011f011f011f011f' _
& '011f01ff1f011601e018df011f011f011f011f01ff1f011f011f011f011f011f011f011f01ff1f011f011f011f011f011f011f011601ff3f17cf021f011f011f' _
& '011f011f011f01ff1f011f011f011f011f011f011f011f01ff1f011f011f011f0119013f17ff021f01ff1f011f011f011f011f011f011f011f01ff1f011f011f' _
& '011f011f011f011f011f01031f01120115b0e2ff030000000004906731ffb90ffff57f206b10c05c'

; -------------------------------------------------------------------------------------------
; CONTROL
; -------------------------------------------------------------------------------------------

; check one instance
if UBound(ProcessList(@ScriptName)) > 2 then
	MsgBox(48, 'S70 Echo ' & $VERSION, 'Program byl již spuštěn.')
	exit
endif

; logging
$log = FileOpen($log_file, 1)
if @error then
	MsgBox(48, 'S70 Echo ' & $VERSION, 'System je připojen pouze pro čtení.')
	exit
endif

; cmdline
if UBound($cmdline) < 5 then; minimum  CNT(1) + IDUZI(1) + RC(1) + NAME(2) + H(1) + W(1)
	MsgBox(48, 'S70 Echo ' & $VERSION, 'Načtení základních údajů pacienta z Medicus selhalo.')
	exit
endif

; -------------------------------------------------------------------------------------------
; INIT
; -------------------------------------------------------------------------------------------

; logging
logger('Program spuštěn: ' & @YEAR & '/' & @MON & '/' & @MDAY & ' ' & @HOUR & ':' & @MIN & ':' & @SEC & ' [' & $cmdline[2] & ']')

; read configuration
if FileExists($config_file) then
	read_config_file($config_file)
	if @error then logger('Načtení konfiguračního souboru selhalo.')
Else
	$c = FileOpen($config_file, 2 + 256); UTF8 / NOBOM overwrite
	FileWrite($c, 'export=' & @CRLF & 'archive=' & @CRLF & 'history=')
	FileClose($c)
endif

; update history path
$history_path = $archive_path & '\' & 'history'

; create archive / history directory
DirCreate($archive_path)
DirCreate($history_path & '\' & $cmdline[2])

; archive file full path
global $archive_file = $archive_path & '\' & $cmdline[2] & '.dat'

; export  file full path
global $export_file = get_export_file($export_path, $cmdline[2])
if @error or not $export_file then logger('Export: Soubor exportu nebyl nalezen. ' & $cmdline[2])

; update data buffer from export
if FileExists($export_file) then
	$parse = export_parse($export_file)
	if @error then
		FileMove($export_file, $export_file & '.err', 1); overwrite
		logger('Export: Nepodařilo se načíst export. ' & $cmdline[2])
	else
		FileMove($export_file, $export_file & '.old', 1); overwrite
		logger('Export: Soubor načten.')
	endif
endif

; populate history buffer from archive
if FileExists($archive_file) then
	$history = Json_Decode(FileRead($archive_file))
	if @error then logger('Historie: Nepodařilo se načíst historii. ' & $cmdline[2] & '.dat')
endif

; update note from history
for $group in Json_ObjGet($order, '.group')
	Json_Put($buffer, '.group.' & $group & '.note', Json_ObjGet($history, '.group.' & $group & '.note'), True)
next

; update height & weight if not export
if UBound($cmdline) = 7  Then
	if Json_ObjGet($buffer, '.height') = Null then Json_Put($buffer, '.height', Number($cmdline[5]), True)
	if Json_ObjGet($buffer, '.weight') = Null then Json_Put($buffer, '.weight', Number($cmdline[6]), True)
endif

; update result from history or template
Json_Put($buffer, '.result', Json_ObjGet($history, '.result'), True)
if Json_ObjGet($buffer, '.result') = Null then
	if fifty($cmdline[2]) then
		Json_Put($buffer, '.result', $result_template[1], True)
	else
		Json_Put($buffer, '.result', $result_template[0], True)
	endif
endif

; update note on default
for $group in Json_ObjGet($order, '.group')
	if Json_ObjGet($buffer, '.group.' & $group & '.note') = Null then
		if fifty($cmdline[2]) then
			Json_Put($buffer, '.group.' & $group & '.note', Json_Get($note, '.' & $group & '[1]'), True)
		else
			Json_Put($buffer, '.group.' & $group & '.note', Json_Get($note, '.' & $group & '[0]'), True)
		endif
	endif
next

; calculate values
calculate(0, 'default', True)

; -------------------------------------------------------------------------------------------
; GUI
; -------------------------------------------------------------------------------------------

$gui_index = 0
$gui_top_offset = 15; offset from basic
$gui_left_offset = 0
$gui_group_top_offset = 20
$gui_group_index = 0

$gui = GUICreate('S70 Echo ' & $VERSION & ' - ' &$cmdline[3] & ' ' & $cmdline[4] & ' - ' & StringLeft($cmdline[2], 6) & '/' & StringTrimLeft($cmdline[2], 6), 890, 1010, @DesktopWidth - 895, 0)
;$gui = GUICreate('S70 Echo ' & $VERSION & ' - ' & $cmdline[3] & ' ' & $cmdline[4] & ' - ' & StringLeft($cmdline[2], 6) & '/' & StringTrimLeft($cmdline[2], 6), 890, 1010, 120, 0)

; header
$label_height = GUICtrlCreateLabel('Výška', 0, 5, 85, 17, 0x0002); right
$input_height = GUICtrlCreateEdit(Json_ObjGet($buffer, '.height'), 89, 2, 36, 19, 1); ES_CENTER
$input_height_unit = GUICtrlCreateLabel('cm', 130, 4, 45, 21)

$label_wegiht = GUICtrlCreateLabel('Váha', 175, 5, 85, 17, 0x0002); right
$input_weight = GUICtrlCreateEdit(Json_ObjGet($buffer, '.weight'), 175 + 89, 2, 36, 19, 1); ES_CENTER
$input_weight_unit = GUICtrlCreateLabel('kg', 175 + 130, 4, 45, 21)

$label_bsa = GUICtrlCreateLabel('BSA', 175 + 175, 5, 85, 17, 0x0002); right
$input_bsa = GUICtrlCreateEdit(Json_ObjGet($buffer, '.bsa'), 175 + 175 + 89, 2, 36, 19, BitOr(0x0001, 0x0800)); read-only
$input_bsa_unit = GUICtrlCreateLabel('m²', 175 + 175 + 130, 4, 45, 21)

$button_del_note = GUICtrlCreateButton('Vymazat poznámky', 680, 2, 110, 21)
$button_del_result = GUICtrlCreateButton('Vymazat závěr', 793, 2, 90, 21)

; groups
for $group in Json_ObjGet($order, '.group')
	for $member in Json_ObjGet($order, '.data.' & $group)
		; data
		if IsString(Json_Get($buffer, '.data.' & $group & '."' & $member & '".label')) then
			; update index / offset
			if Mod($gui_index, 5) = 0 then; = both start or end offset!
				$gui_top_offset+=21; member spacing
				$gui_left_offset=0; reset
			Else
				$gui_left_offset+=175; column offset
			endif
			; label
			GUICtrlCreateLabel(Json_Get($buffer, '.data.' & $group & '."' & $member & '".label'), $gui_left_offset, $gui_top_offset + 3, 85, 21, 0x0002); align right
			if $member == 'AV max/meanPG' or $member == 'SV/SVi' Then; the prolonged one
				; input
				$id = GUICtrlCreateEdit(Json_Get($buffer, '.data.' & $group & '."' & $member & '".value'), 89 + $gui_left_offset, $gui_top_offset, 43, 19, 0x0001); centered
				; unit
				GUICtrlCreateLabel(Json_Get($buffer, '.data.' & $group & '."' & $member & '".unit'), 130 + $gui_left_offset + 5, $gui_top_offset + 3, 40, 21)
			else
				; input
				$id = GUICtrlCreateEdit(Json_Get($buffer, '.data.' & $group & '."' & $member & '".value'), 89 + $gui_left_offset, $gui_top_offset, 36, 19, 0x0001); centered
				; unit
				GUICtrlCreateLabel(Json_Get($buffer, '.data.' & $group & '."' & $member & '".unit'), 130 + $gui_left_offset, $gui_top_offset + 3, 45, 21)
			endif
			Json_Put($buffer, '.data.' & $group & '."' & $member & '".id', $id, True)
			_ArrayAdd($hook_data_map, $id & '|' & $member); update data edit hook
			; update index
			$gui_index+=1
			; extra step down hole
			if $member == 'S-RV' then $gui_index+=1
		endif
	next
	; note
	GUICtrlCreateLabel('Poznámka:', 0, 21 + $gui_top_offset + 3, 85, 21, 0x0002)
	$id = GUICtrlCreateEdit(Json_Get($buffer, '.group.' & $group & '.note'), 89, 21 + $gui_top_offset, 786, 21, 128); $ES_AUTOHSCROLL
	Json_Put($buffer, '.group.' & $group & '.id', $id, True)
	_ArrayAdd($hook_text_map, $id); update text edit hook
	$gui_top_offset+=18; group spacing
	; group
	GUICtrlCreateGroup(Json_ObjGet($buffer, '.group.' & $group & '.label'), 5, $gui_group_top_offset, 880, 21 + 21 * (gui_get_group_index($gui_index, 5)+ 1))
	GUICtrlSetFont(-1, 8, 800, 0, 'MS Sans Serif')
	$gui_group_top_offset += 21 + 21 * (gui_get_group_index($gui_index, 5) + 1)

	; update index / offset
	$gui_top_offset+=24; group spacing
	$gui_left_offset=0; reset
	$gui_index=0; reset
next

; dekurz
$label_dekurz = GUICtrlCreateLabel('Závěr:', 0, $gui_group_top_offset + 8, 87, 21,0x0002); align right
$edit_dekurz = GUICtrlCreateEdit(Json_ObjGet($buffer, '.result'), 89, $gui_group_top_offset + 8, 793, 69, BitOR(64, 4096, 0x00200000)); $ES_AUTOVSCROLL, $ES_WANTRETURN, $WS_VSCROLL
_ArrayAdd($hook_text_map, $edit_dekurz); update edit hook
; date
$label_datetime = GUICtrlCreateLabel($runtime, 8, $gui_group_top_offset + 87, 105, 17)

; error
$label_error = GUICtrlCreateLabel('', 120, $gui_group_top_offset + 87, 40, 17)

; button
$button_history = GUICtrlCreateButton('Historie', 486, $gui_group_top_offset + 83, 75, 21)
$button_tisk = GUICtrlCreateButton('Tisk', 564, $gui_group_top_offset + 83, 75, 21)
$button_dekurz = GUICtrlCreateButton('Dekurz', 642, $gui_group_top_offset + 83, 75, 21)
$button_store = GUICtrlCreateButton('Uložit a zavřít', 720, $gui_group_top_offset + 83, 85, 21)
$button_exit = GUICtrlCreateButton('Storno', 808, $gui_group_top_offset + 83, 75, 21)

; GUI tune
GUICtrlSetColor($label_error, 0xff0000)
GUICtrlSetState($button_exit, $GUI_FOCUS)

; message handler response dummy control
$dummy = GUICtrlCreateDummy()

; message handler
GUIRegisterMsg($WM_COMMAND, 'edit_handler')

; GUI display
GUISetState(@SW_SHOW)

; dekurz initialize
$dekurz_init = dekurz_init()
if @error then logger($dekurz_init)

; -------------------------------------------------------------------------------------------
; MAIN
; -------------------------------------------------------------------------------------------

While 1
	$msg = GUIGetMsg()
	; dynamic re-calculation
	if $msg = $dummy then calculate(GUICtrlRead($dummy), get_control(GUICtrlRead($dummy)), False)
	; generate dekurz clipboard
	if $msg = $button_dekurz then
		gui_enable(False)
		GUICtrlSetData($label_error, '')
		$dekurz = dekurz()
		if @error then
			logger($dekurz)
			MsgBox(48, 'S70 Echo ' & $VERSION, 'Generování dekurzu selhalo.')
			; trying re-initialize
			$dekurz_init = dekurz_init()
			if @error then logger($dekurz_init)
		endif
		sleep(200)
		gui_enable(True)
		GUICtrlSetData($label_error, 'Hotovo.')
	endif
	; print data
	if $msg = $button_tisk Then
		gui_enable(False)
		$print = print()
		if @error then
			logger($print)
			MsgBox(48, 'S70 Echo ' & $VERSION, 'Tisk selhal.')
		endif
		gui_enable(True)
	endif
	; clear notes
	if $msg = $button_del_note Then
		for $group in Json_ObjGet($order, '.group')
			GUICtrlSetData(Json_Get($buffer, '.group.' & $group & '.id'), '')
		next
	endif
	; clear result
	if $msg = $button_del_result Then GUICtrlSetData($edit_dekurz, '')
	; load history data
	if $msg = $button_history Then
		if FileExists($archive_file) then
			if _DateDiff('D', Json_Get($history,'.date'), $runtime) < $AGE then
				if msgbox(4, 'S70 Echo ' & $VERSION, 'Načíst poslední naměřené hodnoty?') = 6 then
					; update basic
					GUICtrlSetData($input_height, Json_ObjGet($history, '.height'))
					GUICtrlSetData($input_weight, Json_ObjGet($history, '.weight'))
					GUICtrlSetData($input_bsa, Json_ObjGet($history, '.bsa'))
					; update data
					for $group in Json_ObjGet($history, '.group')
						for $member in Json_ObjGet($history, '.data.' & $group)
							GUICtrlSetData(Json_Get($buffer, '.data.' & $group & '."' & $member & '".id'), Json_Get($history, '.data.' & $group & '."' & $member & '".value'))
						next
					next
					; update buffer
					Json_Put($buffer, '.height', Json_ObjGet($history, '.height'))
					Json_Put($buffer, '.weight', Json_ObjGet($history, '.weight'))
					Json_Put($buffer, '.bsa', Json_ObjGet($history, '.bsa'))
					for $group in Json_ObjGet($history, '.group')
						for $member in Json_ObjGet($history, '.data.' & $group)
							Json_Put($buffer, '.data.' & $group & '."' & $member & '".value', Json_Get($history, '.data.' & $group & '."' & $member & '".value'), True)
						next
					next
				endif
			else
				msgbox(48, 'S70 Echo ' & $VERSION, 'Nelze načíst historii starší ' & $AGE & ' dnů.')
			endif
		else
			MsgBox(48, 'S70 Echo ' & $VERSION, 'Žádná historie není dostupná.')
		endif
	endif
	; write & exit
	if $msg = $button_store then
		; close dekurz
		_Excel_BookClose($book)
		_Excel_Close($excel)
		; update result
		Json_Put($buffer, '.result', GuiCtrlRead($edit_dekurz), True)
		; update height / weight
		Json_Put($buffer, '.height', Number(StringReplace(GuiCtrlRead($input_height), ',', '.')), True)
		Json_Put($buffer, '.weight', Number(StringReplace(GuiCtrlRead($input_weight), ',', '.')), True)
		; update data buffer
		for $group in Json_ObjGet($order, '.group')
			; update note
			Json_Put($buffer, '.group.' & $group & '.note', GuiCtrlRead(Json_Get($buffer, '.group.' & $group & '.id')), True)
			; update data
			for $member in Json_ObjGet($order, '.data.' & $group)
				if not GuiCtrlRead(Json_Get($buffer, '.data.'  & $group & '."' & $member & '".id')) then
					Json_Put($buffer, '.data.'  & $group & '."' & $member & '".value', Null, True)
				else
					$double = StringSplit(StringReplace(GuiCtrlRead(Json_Get($buffer, '.data.'  & $group & '."' & $member & '".id')), ',', '.'), '/', 2); no count
					if @error then
						Json_Put($buffer, '.data.'  & $group & '."' & $member & '".value', Number($double[0]), True)
					else
						Json_Put($buffer, '.data.'  & $group & '."' & $member & '".value', $double[0] & '/' & $double[1], True)
					endif
				endif
			next
		next
		; update timestamp
		Json_Put($buffer, '.date', $runtime, True)
		; write data buffer to archive
		$out = FileOpen($archive_file, 2 + 256); UTF8 / NOBOM overwrite
		FileWrite($out, Json_Encode($buffer))
		if @error then logger('Program: Zápis historie selhal. ' & $cmdline[2] & '.dat')
		FileClose($out)
		; update history
		FileCopy($archive_file, $history_path & '\' & $cmdline[2] & '\' & $cmdline[2] & '_'  & @YEAR & @MDAY & @MON & @HOUR & @MIN & @SEC & '.dat')
		if @error then logger('Program: Zápis archivu selhal. ' & $cmdline[2])
		; exit
		exitloop
	endif
	; storno & default exit
	if $msg = $GUI_EVENT_CLOSE or $msg = $button_exit then
		; close dekurz
		_Excel_BookClose($book)
		_Excel_Close($excel)
		; exit
		exitloop
	endif
wend

;exit
logger('Program ukončen: ' & @YEAR & '/' & @MON & '/' & @MDAY & ' ' & @HOUR & ':' & @MIN & ':' & @SEC)
logger('----')
FileClose($log)

exit

; -------------------------------------------------------------------------------------------
; FUNCTION
; -------------------------------------------------------------------------------------------

; logging
func logger($text)
	FileWriteLine($log_file, $text)
endfunc

; get name from control id
func get_control($id)
	if $id = $input_height then return 'height'
	if $id = $input_weight then return 'weight'
	return $hook_data_map[_ArrayBinarySearch($hook_data_map, $id)][1]
endfunc

; intercept edit message handler
func edit_handler($window, $message, $param, $control)
	local $id = BitAND($param, 0x0000ffff); loword
	local $code = BitShift($param, 16); hiword
	if $code = $EN_CHANGE then
		_ArrayBinarySearch($hook_text_map, $id)
		if not @error then
			return $GUI_RUNDEFMSG; return to internal handler
		else
			return GUICtrlSendToDummy($dummy, $id); pass ID to main loop
		endif
	endif
	return $GUI_RUNDEFMSG; return to internal handler
EndFunc

; determine age over fifty from UIN
func fifty($rc)
	local $rc_year = Int(StringLeft($rc, 2))
	local $year = Int(StringRight(@YEAR, 2))
	local $fifty = Int(StringRight(@YEAR - 50, 2))
	if $year < 50 then
		if $rc_year > $fifty or $rc_year <= $year then Return False
	ElseIf $year >= 50 then
		if $rc_year > $fifty and $rc_year <= $year then Return False
	endif
	Return True
endfunc

; GUI buttons visibility
func gui_enable($visible)
	local $state
	if $visible = True then $state = $GUI_ENABLE
	If $visible = False then $state = $GUI_DISABLE
	GUICtrlSetState($button_del_note, $state)
	GUICtrlSetState($button_del_result, $state)
	GUICtrlSetState($button_history, $state)
	GUICtrlSetState($button_tisk, $state)
	GUICtrlSetState($button_dekurz, $state)
	GUICtrlSetState($button_store, $state)
	GUICtrlSetState($button_exit, $state)
EndFunc

; read configuration file
func read_config_file($file)
	local $cfg
	_FileReadToArray($file, $cfg, 0, "=")
	if @error then return SetError(1)
	for $i = 0 to UBound($cfg) - 1
		if $cfg[$i][0] == 'export' then $export_path = StringRegExpReplace($cfg[$i][1], '\\$', ''); strip trailing backslash
		if $cfg[$i][0] == 'archive' then $archive_path = StringRegExpReplace($cfg[$i][1], '\\$', ''); strip trailing backslash
		if $cfg[$i][0] == 'history' then $AGE = Number($cfg[$i][1])
	next
endfunc

; find export file
func get_export_file($export_path, $rc)
	local $list = _FileListToArray($export_path, '*.txt', 1); files only
	if @error then Return SetError(1)
	for $i = 1 to ubound($list) - 1
		if StringRegExp($list[$i], '^' & $rc & '_.*') then return $export_path & '\' & $list[$i]
	next
	return ''
endfunc

; parse S70 export file
func export_parse($export)
	local $raw
	_FileReadToArray($export, $raw, 0); no count
	if @error then return SetError(1, 0, 'Export: Nelze načíst souboru exportu. ' & $export)
	; parse basic
	for $i = 0 to UBound($raw) - 1
		if StringRegExp($raw[$i], '^BSA\h.*') then Json_Put($buffer, '.bsa', Number(StringRegExpReplace($raw[$i], '^BSA\h(.*) .*', '$1')), True)
		if StringRegExp($raw[$i], '^Height\h.*') then Json_Put($buffer, '.height', Number(StringRegExpReplace($raw[$i], '^Height\h(.*) .*', '$1')), True)
		if StringRegExp($raw[$i], '^Weight\h.*') then Json_Put($buffer, '.weight', Number(StringRegExpReplace($raw[$i], '^Weight\h(.*) .*', '$1')), True)
	next
	; parse data
	for $group in Json_ObjGet($order, '.group')
		for $member in Json_ObjGet($order, '.data.' & $group)
			for $j = 0 to UBound($raw) - 1
				if StringRegExp($raw[$j], '^' & $member & '\t.*') then
					StringReplace($raw[$j], @TAB, ''); test tabs
					if @extended = 2 Then
						Json_Put($buffer, '.data.' & $group & '."' & $member & '".value', Round(Number(StringRegExpReplace($raw[$j], '^.*\t(.*)\t.*', '$1')), 1), True)
					elseif @extended = 1 then
						Json_Put($buffer, '.data.' & $group & '."' & $member & '".value', Round(Number(StringRegExpReplace($raw[$j], '.*\t(.*)$', '$1')), 1), True)
					endif
					ExitLoop; skip full traversal
				endif
			next
		next
	next
endfunc

; calculate aditional variables
func calculate($id, $name, $export=False)
	switch $name; BSA
		case 'weight', 'height', 'default'
			if $name == 'height' then Json_Put($buffer, '.height', GuiCtrlRead($input_height) ? Number(StringReplace(GuiCtrlRead($input_height), ',', '.')) : Null, True)
			if $name == 'weight' then Json_Put($buffer, '.weight', GuiCtrlRead($input_weight) ? Number(StringReplace(GuiCtrlRead($input_weight), ',', '.')) : Null, True)
			if IsNumber(Json_Get($buffer, '.weight')) and IsNumber(Json_Get($buffer, '.height')) then
				Json_Put($buffer, '.bsa', Round((Json_Get($buffer, '.weight')^0.425)*(Json_Get($buffer, '.height')^0.725)*71.84*(10^-4), 2), True)
			else
				Json_Put($buffer, '.bsa', Null, True)
			endif
			if not $export then GUICtrlSetData($input_bsa, Json_ObjGet($buffer, '.bsa'))
	EndSwitch
	switch $name; LVd index
		case 'LVIDd', 'weight', 'height', 'default'
			if $name == 'LVIDd' then Json_Put($buffer, '.data.lk.LVIDd.value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if IsNumber(Json_Get($buffer, '.data.lk.LVIDd.value')) and IsNumber(Json_Get($buffer, '.bsa')) then
				Json_Put($buffer, '.data.lk."LVd index".value', Round(Json_Get($buffer, '.data.lk.LVIDd.value')/Json_Get($buffer, '.bsa'), 0), True)
			else
				Json_Put($buffer, '.data.lk."LVd index".value', Null, True)
			endif
			if not $export then GUICtrlSetData(Json_Get($buffer, '.data.lk."LVd index".id'), Json_Get($buffer, '.data.lk."LVd index".value'))
	EndSwitch
	switch $name; LVs index
		case 'LVIDs', 'weight','height', 'default'
			if $name == 'LVIDs' then Json_Put($buffer, '.data.lk.LVIDs.value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if IsNumber(Json_Get($buffer, '.data.lk.LVIDs.value')) and IsNumber(Json_Get($buffer, '.bsa')) then
				Json_Put($buffer, '.data.lk."LVs index".value', Round(Json_Get($buffer, '.data.lk.LVIDs.value')/Json_Get($buffer, '.bsa'), 0), True)
			else
				Json_Put($buffer, '.data.lk."LVs index".value', Null, True)
			endif
			if not $export then GUICtrlSetData(Json_Get($buffer, '.data.lk."LVs index".id'), Json_Get($buffer, '.data.lk."LVs index".value'))
	EndSwitch
	switch $name; LVEF % Teich.
		case 'LVIDd', 'LVIDs', 'default'
			if IsNumber(Json_Get($buffer, '.data.lk.LVIDd.value')) and IsNumber(Json_Get($buffer, '.data.lk.LVIDs.value')) then
				Json_Put($buffer, '.data.lk."LVEF % Teich".value', Round((7/(2.4+Json_Get($buffer, '.data.lk.LVIDd.value')/10)*(Json_Get($buffer, '.data.lk.LVIDd.value')/10)^3-7/(2.4+Json_Get($buffer, '.data.lk.LVIDs.value')/10)*(Json_Get($buffer, '.data.lk.LVIDs.value')/10)^3)/(7/(2.4+Json_Get($buffer, '.data.lk.LVIDd.value')/10)*(Json_Get($buffer, '.data.lk.LVIDd.value')/10)^3)*100, 0), True)
			else
				Json_Put($buffer, '.data.lk."LVEF % Teich".value', Null, True)
			endif
			if not $export then GUICtrlSetData(Json_Get($buffer, '.data.lk."LVEF % Teich".id'), Json_Get($buffer, '.data.lk."LVEF % Teich".value'))
		; FS
			if IsNumber(Json_Get($buffer, '.data.lk.LVIDd.value')) and IsNumber(Json_Get($buffer, '.data.lk.LVIDs.value')) then
				Json_Put($buffer, '.data.lk.FS.value', Round((Json_Get($buffer, '.data.lk.LVIDd.value')-Json_Get($buffer, '.data.lk.LVIDs.value'))/Json_Get($buffer, '.data.lk.LVIDd.value')*100, 0), True)
			else
				Json_Put($buffer, '.data.lk.FS.value', Null, True)
			endif
			if not $export then GUICtrlSetData(Json_Get($buffer, '.data.lk.FS.id'), Json_Get($buffer, '.data.lk.FS.value'))
	EndSwitch
	switch $name; LVmass
		case 'IVSd', 'LVPWd', 'LVIDd', 'default'
			if $name == 'IVSd' then Json_Put($buffer, '.data.lk.IVSd.value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if $name == 'LVPWd' then Json_Put($buffer, '.data.lk.LVPWd.value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if IsNumber(Json_Get($buffer, '.data.lk.LVIDd.value')) and IsNumber(Json_Get($buffer, '.data.lk.IVSd.value')) and IsNumber(Json_Get($buffer, '.data.lk.LVPWd.value')) then
				Json_Put($buffer, '.data.lk.LVmass.value', Round(1.04*(Json_get($buffer, '.data.lk.LVIDd.value')/10 + Json_Get($buffer, '.data.lk.IVSd.value')/10 + Json_Get($buffer, '.data.lk.LVPWd.value')/10)^3-(Json_Get($buffer, '.data.lk.LVIDd.value')/10)^3-13.6, 0), True)
			else
				Json_Put($buffer, '.data.lk.LVmass.value', Null, True)
			endif
			if not $export then GUICtrlSetData(Json_Get($buffer, '.data.lk.LVmass.id'), Json_Get($buffer, '.data.lk.LVmass.value'))
	EndSwitch
	switch $name; LVmass-BSA
		case 'LVmass', 'IVSd', 'LVPWd', 'LVIDd', 'height', 'weight', 'default'
			if $name == 'LVmass' then Json_Put($buffer, '.data.lk.LVmass.value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if IsNumber(Json_Get($buffer, '.bsa')) and IsNumber(Json_Get($buffer, '.data.lk.LVmass.value')) then
				Json_Put($buffer, '.data.lk.LVmass-BSA.value',Round(Json_Get($buffer, '.data.lk.LVmass.value')/Json_Get($buffer, '.bsa'), 0), True)
			else
				Json_Put($buffer, '.data.lk.LVmass-BSA.value', Null, True)
			endif
			if not $export then GUICtrlSetData(Json_Get($buffer, '.data.lk.LVmass-BSA.id'), Json_Get($buffer, '.data.lk.LVmass-BSA.value'))
	EndSwitch
	switch $name; LVmass-i^2,7
		case 'LVmass', 'IVSd', 'LVPWd', 'LVIDd', 'height', 'default'
			if IsNumber(Json_Get($buffer, '.height')) and IsNumber(Json_Get($buffer, '.data.lk.LVmass.value')) then
				Json_Put($buffer, '.data.lk."LVmass-i^2,7".value', Round(Json_Get($buffer, '.data.lk.LVmass.value')/(Json_Get($buffer, '.height')/100)^2.7, 0), True)
			else
				Json_Put($buffer, '.data.lk."LVmass-i^2,7".value', Null, True)
			endif
			if not $export then GUICtrlSetData(Json_Get($buffer, '.data.lk."LVmass-i^2,7".id'), Json_Get($buffer, '.data.lk."LVmass-i^2,7".value'))
	EndSwitch
	switch $name; RWT
		case 'LVPWd', 'LVIDd', 'default'
			if IsNumber(Json_Get($buffer, '.data.lk.LVIDd.value')) and IsNumber(Json_Get($buffer, '.data.lk.LVPWd.value')) then
				Json_Put($buffer, '.data.lk.RWT.value', Number(StringFormat("%.2f", 2*Json_Get($buffer, '.data.lk.LVPWd.value')/Json_Get($buffer, '.data.lk.LVIDd.value'))), True)
			else
				Json_Put($buffer, '.data.lk.RWT.value', Null, True)
			endif
			if not $export then GUICtrlSetData(Json_Get($buffer, '.data.lk.RWT.id'), Json_Get($buffer, '.data.lk.RWT.value'))
	EndSwitch
	switch $name; EDVi
		case 'LVEDV MOD BP', 'height', 'weight', 'default'
			if $name == 'LVEDV MOD BP' then Json_Put($buffer, '.data.lk."LVEDV MOD BP".value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if IsNumber(Json_Get($buffer, '.data.lk."LVEDV MOD BP".value')) and IsNumber(Json_Get($buffer, '.bsa')) then
				Json_Put($buffer, '.data.lk.EDVi.value', Round(Json_Get($buffer, '.data.lk."LVEDV MOD BP".value')/Json_Get($buffer, '.bsa'), 0), True)
			else
				Json_Put($buffer, '.data.lk.EDVi.value', Null, True)
			endif
			if not $export then GUICtrlSetData(Json_Get($buffer, '.data.lk.EDVi.id'), Json_Get($buffer, '.data.lk.EDVi.value'))
	EndSwitch
	switch $name; ESVi
		case 'LVESV MOD BP', 'height', 'weight', 'default'
			if $name == 'LVESV MOD BP' then Json_Put($buffer, '.data.lk."LVESV MOD BP".value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if IsNumber(Json_Get($buffer, '.data.lk."LVESV MOD BP".value')) and IsNumber(Json_Get($buffer, '.bsa')) then
				Json_Put($buffer, '.data.lk.ESVi.value', Round(Json_Get($buffer, '.data.lk."LVESV MOD BP".value')/Json_Get($buffer, '.bsa'), 0), True)
			else
				Json_Put($buffer,  '.data.lk.ESVi.value', Null, True)
			endif
			if not $export then GUICtrlSetData(Json_Get($buffer, '.data.lk.ESVi.id'), Json_Get($buffer, '.data.lk.ESVi.value'))
	EndSwitch
	switch $name; LAV-A4C (LAV-1D)
		case 'LAEDV A-L A4C', 'LAEDV MOD A4C', 'default'
			if IsNumber(Json_Get($buffer, '.data.ls."LAEDV A-L A4C".value')) and IsNumber(Json_Get($buffer, '.data.ls."LAEDV MOD A4C".value')) then
				Json_Put($buffer, '.data.ls.LAV-A4C.value', Round((Json_Get($buffer, '.data.ls."LAEDV A-L A4C".value') + Json_Get($buffer, '.data.ls."LAEDV MOD A4C".value'))/2, 0), True)
			else
				Json_Put($buffer,  '.data.ls.LAV-A4C.value', Null, True)
			endif
	EndSwitch
	switch $name; LAVi (LAVi-1D)
		case 'LAV-A4C', 'height', 'weight', 'default'
			if $name == 'LAV-A4C' then Json_Put($buffer, '.data.ls.LAV-A4C.value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if IsNumber(Json_Get($buffer, '.data.ls.LAV-A4C.value')) and IsNumber(Json_Get($buffer, '.bsa')) then
				Json_Put($buffer, '.data.ls.LAVi.value', Round(Json_Get($buffer, '.data.ls.LAV-A4C.value')/Json_Get($buffer, '.bsa'), 0), True)
			else
				Json_Put($buffer, '.data.ls.LAVi.value', Null, True)
			endif
			if not $export then GUICtrlSetData(Json_Get($buffer, '.data.ls.LAVi.id'), Json_Get($buffer, '.data.ls.LAVi.value'))
	EndSwitch
	switch $name; LAV-2D
		case 'L Area-A4C', 'L Area-A2C', 'LA Major', 'default'
			if $name == 'L Area-A4C' then Json_Put($buffer, '.data.ls."L Area-A4C".value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if $name == 'L Area-A2C' then Json_Put($buffer, '.data.ls."L Area-A2C".value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if $name == 'LA Major' then Json_Put($buffer, '.data.ls."LA Major".value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if IsNumber(Json_Get($buffer,'.data.ls."L Area-A4C".value')) and IsNumber(Json_Get($buffer, '.data.ls."L Area-A2C".value')) and IsNumber(Json_Get($buffer, '.data.ls."LA Major".value')) then
				Json_Put($buffer, '.data.ls.LAV-2D.value', Round(0.85*Json_Get($buffer, '.data.ls."L Area-A4C".value')*Json_Get($buffer, '.data.ls."L Area-A2C".value')/Json_Get($buffer, '.data.ls."LA Major".value')*10, 0), True)
			else
				Json_Put($buffer, '.data.ls.LAV-2D.value', Null, True)
			endif
			if not $export then GUICtrlSetData(Json_Get($buffer, '.data.ls.LAV-2D.id'), Json_Get($buffer, '.data.ls.LAV-2D.value'))
	EndSwitch
	switch $name; LAVi-2D
		case 'LAV-2D', 'L Area-A4C', 'L Area-A2C', 'LA Major', 'height', 'weight', 'default'
			if $name == 'LAV-2D' then Json_Put($buffer, '.data.ls.LAV-2D.value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if IsNumber(Json_Get($buffer,'.data.ls.LAV-2D.value')) and IsNumber(Json_Get($buffer, '.bsa')) then
				Json_Put($buffer, '.data.ls.LAVi-2D.value', Round(Json_Get($buffer, '.data.ls.LAV-2D.value')/Json_Get($buffer, '.bsa'), 0), True)
			else
				Json_Put($buffer, '.data.ls.LAVi-2D.value', Null, True)
			endif
			if not $export then GUICtrlSetData(Json_Get($buffer, '.data.ls.LAVi-2D.id'), Json_Get($buffer, '.data.ls.LAVi-2D.value'))
	EndSwitch
	switch $name; FAC%
		case 'EDA', 'ESA', 'default'
			if $name == 'EDA' then Json_Put($buffer, '.data.pk.EDA.value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if $name == 'ESA' then Json_Put($buffer, '.data.pk.ESA.value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if IsNumber(Json_Get($buffer,'.data.pk.EDA.value')) and IsNumber(Json_Get($buffer, '.data.pk.ESA.value')) then
				Json_Put($buffer, '.data.pk."FAC%".value', Round((Json_Get($buffer, '.data.pk.EDA.value')-Json_Get($buffer, '.data.pk.ESA.value'))/Json_Get($buffer, '.data.pk.EDA.value')*100, 0), True)
			else
				Json_Put($buffer,  '.data.pk."FAC%".value', Null, True)
			endif
			if not $export then GUICtrlSetData(Json_Get($buffer, '.data.pk."FAC%".id'), Json_Get($buffer, '.data.pk."FAC%".value'))
	EndSwitch
	switch $name; RAVi
		case 'RAV', 'height', 'weight', 'default'
			if $name == 'RAV' then Json_Put($buffer, '.data.ps.RAV.value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if IsNumber(Json_Get($buffer,'.data.ps.RAV.value')) and IsNumber(Json_Get($buffer, '.bsa')) then
				Json_Put($buffer, '.data.ps.RAVi.value', Round(Json_Get($buffer, '.data.ps.RAV.value')/Json_Get($buffer, '.bsa'), 0), True)
			else
				Json_Put($buffer, '.data.ps.RAVi.value', Null, True)
			endif
			if not $export then GUICtrlSetData(Json_Get($buffer, '.data.ps.RAVi.id'), Json_Get($buffer, '.data.ps.RAVi.value'))
	EndSwitch
	switch $name; Asc-Ao index
		case 'Ao Diam', 'Asc-Ao 2D', 'height', 'weight', 'default'
			if $name == 'Ao Diam' then Json_Put($buffer, '.data.ao."Ao Diam".value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if $name == 'Asc-Ao 2D' then Json_Put($buffer, '.data.ao."Asc-Ao 2D".value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if (IsNumber(Json_Get($buffer,'.data.ao."Ao Diam".value')) or IsNumber(Json_Get($buffer,'.data.ao."Asc-Ao 2D".value'))) and IsNumber(Json_Get($buffer, '.bsa')) then
				if IsNumber(Json_Get($buffer,'.data.ao."Asc-Ao 2D".value')) then
					Json_Put($buffer, '.data.ao."Asc-Ao index".value', Round(Json_Get($buffer, '.data.ao."Asc-Ao 2D".value')/Json_Get($buffer, '.bsa'), 0), True)
				ElseIf IsNumber(Json_Get($buffer,'.data.ao."Ao Diam".value')) then
					Json_Put($buffer, '.data.ao."Asc-Ao index".value', Round(Json_Get($buffer, '.data.ao."Ao Diam".value')/Json_Get($buffer, '.bsa'), 0), True)
				endif
			else
				Json_Put($buffer, '.data.ao."Asc-Ao index".value', Null, True)
			endif
			if not $export then GUICtrlSetData(Json_Get($buffer, '.data.ao."Asc-Ao index".id'), Json_Get($buffer, '.data.ao."Asc-Ao index".value'))
	EndSwitch
	switch $name; MV E/A Ratio
		case 'MV E Vel', 'MV A Vel', 'default'
			if $name == 'MV E Vel' then Json_Put($buffer, '.data.mch."MV E Vel".value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if $name == 'MV A Vel' then Json_Put($buffer, '.data.mch."MV A Vel".value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if IsNumber(Json_Get($buffer,'.data.mch."MV E Vel".value')) and IsNumber(Json_Get($buffer, '.data.mch."MV A Vel".value')) then
				Json_Put($buffer, '.data.mch."MV E/A Ratio".value', Number(StringFormat("%.1f", Json_Get($buffer, '.data.mch."MV E Vel".value')/Json_Get($buffer, '.data.mch."MV A Vel".value'))), True)
			else
				Json_Put($buffer, '.data.mch."MV E/A Ratio".value', Null, True)
			endif
			if not $export then GUICtrlSetData(Json_Get($buffer, '.data.mch."MV E/A Ratio".id'), Json_Get($buffer, '.data.mch."MV E/A Ratio".value'))
	EndSwitch
	switch $name; MVA-PHT
		case 'MV PHT', 'default'
			if $name == 'MV PHT' then Json_Put($buffer, '.data.mch."MV PHT".value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if IsNumber(Json_Get($buffer,'.data.mch."MV PHT".value')) then
				Json_Put($buffer, '.data.mch."MVA-PHT".value', Number(StringFormat("%.2f", 220/Json_Get($buffer, '.data.mch."MV PHT".value'))), True)
			else
				Json_Put($buffer, '.data.mch."MVA-PHT".value', Null, True)
			endif
			if not $export then GUICtrlSetData(Json_Get($buffer, '.data.mch."MVA-PHT".id'), Json_Get($buffer, '.data.mch."MVA-PHT".value'))
	EndSwitch
	switch $name; MVAi-PHT
		case 'MVA-PHT', 'MV PHT', 'height', 'weight', 'default'
			if $name == 'MVA-PHT' then Json_Put($buffer, '.data.mch."MVA-PHT".value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if IsNumber(Json_Get($buffer,'.data.mch."MVA-PHT".value')) and IsNumber(Json_Get($buffer,'.bsa')) then
				Json_Put($buffer, '.data.mch."MVAi-PHT".value', Number(StringFormat("%.2f", Json_Get($buffer, '.data.mch."MVA-PHT".value')/Json_Get($buffer, '.bsa'))), True)
			else
				Json_Put($buffer, '.data.mch."MVAi-PHT".value', Null, True)
			endif
			if not $export then GUICtrlSetData(Json_Get($buffer, '.data.mch."MVAi-PHT".id'), Json_Get($buffer, '.data.mch."MVAi-PHT".value'))
	EndSwitch
	switch $name; E/Em
		case 'EmSept', 'EmLat', 'MV E Vel', 'default'
			if $name == 'EmSept' then Json_Put($buffer, '.data.mch.EmSept.value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if $name == 'EmLat' then Json_Put($buffer, '.data.mch.EmLat.value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if IsNumber(Json_Get($buffer, '.data.mch."MV E Vel".value')) and IsNumber(Json_Get($buffer,'.data.mch.EmSept.value')) and IsNumber(Json_Get($buffer,'.data.mch.EmLat.value')) then
				Json_Put($buffer, '.data.mch."E/Em".value', Round(2*Json_Get($buffer, '.data.mch."MV E Vel".value')/(Json_Get($buffer, '.data.mch.EmSept.value') + Json_Get($buffer, '.data.mch.EmLat.value')), 0), True)
			else
				Json_Put($buffer, '.data.mch."E/Em".value', Null, True)
			endif
			if not $export then GUICtrlSetData(Json_Get($buffer, '.data.mch."E/Em".id'), Json_Get($buffer, '.data.mch."E/Em".value'))
	EndSwitch
	switch $name; SV
		case 'LVOT Diam', 'LVOT VTI', 'default'
			if $name == 'LVOT Diam' then Json_Put($buffer, '.data.ach."LVOT Diam".value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if $name == 'LVOT VTI' then Json_Put($buffer, '.data.ach."LVOT VTI".value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if IsNumber(Json_Get($buffer,'.data.ach."LVOT Diam".value')) and IsNumber(Json_Get($buffer, '.data.ach."LVOT VTI".value')) then
				Json_Put($buffer, '.data.ach.SV.value', Round(Json_Get($buffer,'.data.ach."LVOT VTI".value')*Json_Get($buffer,'.data.ach."LVOT Diam".value')^2*3.14159265/4/100, 0), True)
			else
				Json_Put($buffer, '.data.ach.SV.value', Null, True)
			endif
	EndSwitch
	switch $name; SVi
		case 'LVOT Diam', 'LVOT VTI', 'height', 'weight', 'default'
			if IsNumber(Json_Get($buffer,'.data.ach.SV.value')) and IsNumber(Json_Get($buffer, '.bsa')) then
				Json_Put($buffer, '.data.ach.SVi.value', Round(Json_Get($buffer,'.data.ach.SV.value')/Json_Get($buffer,'.bsa'), 0), True)
			else
				Json_Put($buffer, '.data.ach.SVi.value', Null, True)
			endif
		; SV/SVi
			if IsNumber(Json_Get($buffer,'.data.ach.SV.value')) Then
				if IsNumber(Json_Get($buffer, '.data.ach.SVi.value')) then
					Json_Put($buffer, '.data.ach."SV/SVi".value', Round(Json_Get($buffer,'.data.ach.SV.value'), 0) & '/' & Round(Json_Get($buffer,'.data.ach.SVi.value'), 0), True)
				else
					Json_Put($buffer, '.data.ach."SV/SVi".value', Round(Json_Get($buffer,'.data.ach.SV.value'), 0) & '/', True)
				endif
			else
				Json_Put($buffer, '.data.ach."SV/SVi".value', Null, True)
			endif
			if not $export then GUICtrlSetData(Json_Get($buffer, '.data.ach."SV/SVi".id'), Json_Get($buffer, '.data.ach."SV/SVi".value'))
	EndSwitch
	switch $name; AVA
		case 'AV VTI', 'LVOT Diam', 'LVOT VTI', 'default'
			if $name == 'AV VTI' then Json_Put($buffer, '.data.ach."AV VTI".value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if IsNumber(Json_Get($buffer,'.data.ach."LVOT Diam".value')) and IsNumber(Json_Get($buffer, '.data.ach."LVOT VTI".value')) and IsNumber(Json_Get($buffer, '.data.ach."AV VTI".value')) then
				Json_Put($buffer, '.data.ach.AVA.value', Number(StringFormat("%.2f", Json_Get($buffer, '.data.ach."LVOT VTI".value')*Json_Get($buffer, '.data.ach."LVOT Diam".value')^2*3.14159265/4/Json_Get($buffer,'.data.ach."AV VTI".value')/100)), True)
			else
				Json_Put($buffer, '.data.ach.AVA.value', Null, True)
			endif
			if not $export then GUICtrlSetData(Json_Get($buffer, '.data.ach.AVA.id'), Json_Get($buffer, '.data.ach.AVA.value'))
	EndSwitch
	switch $name; AVAi
		case 'AVA', 'AV VTI', 'LVOT Diam', 'LVOT VTI', 'height', 'weight', 'default'
			if $name == 'AVA' then Json_Put($buffer, '.data.ach.AVA.value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if IsNumber(Json_Get($buffer,'.data.ach.AVA.value')) and IsNumber(Json_Get($buffer, '.bsa')) then
				Json_Put($buffer, '.data.ach.AVAi.value', Number(StringFormat("%.2f", Json_Get($buffer,'.data.ach.AVA.value')/Json_Get($buffer, '.bsa'))), True)
			else
				Json_Put($buffer, '.data.ach.AVAi.value', Null, True)
			endif
			if not $export then GUICtrlSetData(Json_Get($buffer, '.data.ach.AVAi.id'), Json_Get($buffer, '.data.ach.AVAi.value'))
	EndSwitch
	switch $name; VTI LVOT/Ao
		case 'LVOT VTI', 'AV VTI', 'default'
			if IsNumber(Json_Get($buffer, '.data.ach."LVOT VTI".value')) and IsNumber(Json_Get($buffer, '.data.ach."AV VTI".value')) then
				Json_Put($buffer, '.data.ach."VTI LVOT/Ao".value', Number(StringFormat("%.2f", Json_Get($buffer, '.data.ach."LVOT VTI".value')/Json_Get($buffer,'.data.ach."AV VTI".value'))), True)
			else
				Json_Put($buffer, '.data.ach."VTI LVOT/Ao".value', Null, True)
			endif
			if not $export then GUICtrlSetData(Json_Get($buffer, '.data.ach."VTI LVOT/Ao".id'), Json_Get($buffer, '.data.ach."VTI LVOT/Ao".value'))
	EndSwitch
	switch $name; AP Spid ratio
		case 'Anulus-AP', 'M Spid', 'default'
			if $name == 'Anulus-AP' then Json_Put($buffer, '.data.mch.Anulus-AP.value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if $name == 'M Spid' then Json_Put($buffer, '.data.mch."M Spid".value', GuiCtrlRead($id) ? Number(StringReplace(GuiCtrlRead($id), ',', '.')) : Null, True)
			if IsNumber(Json_Get($buffer, '.data.mch.Anulus-AP.value')) and IsNumber(Json_Get($buffer, '.data.mch."M Spid".value')) then
				Json_Put($buffer, '.data.mch."AP Spid ratio".value', Number(StringFormat("%.2f", Json_Get($buffer,'.data.mch.Anulus-AP.value')/Json_Get($buffer,'.data.mch."M Spid".value'))), True)
			else
				Json_Put($buffer, '.data.mch."AP Spid ratio".value', Null, True)
			endif
			if not $export then GUICtrlSetData(Json_Get($buffer, '.data.mch."AP Spid ratio".id'), Json_Get($buffer, '.data.mch."AP Spid ratio".value'))
	EndSwitch
	if $name == 'default' then
		; SV-biplane
			if IsNumber(Json_Get($buffer, '.data.lk."SV MOD A2C".value')) and IsNumber(Json_Get($buffer, '.data.lk."SV MOD A4C".value')) then
				Json_Put($buffer, '.data.lk.SV-biplane.value', Round((Json_Get($buffer, '.data.lk."SV MOD A4C".value') + Json_Get($buffer, '.data.lk."SV MOD A2C".value'))/2, 0), True)
			endif
		;MR Rad
			if IsNumber(Json_Get($buffer,'.data.mch."MR Rad".value')) then
				Json_Put($buffer, '.data.mch."MR Rad".value', Round(Json_Get($buffer, '.data.mch."MR Rad".value')*100, 0), True)
			endif
		;AR Rad
			if IsNumber(Json_Get($buffer,'.data.ach."AR Rad".value')) then
				Json_Put($buffer, '.data.ach."AR Rad".value', Round(Json_Get($buffer, '.data.ach."AR Rad".value')*100, 0), True)
			endif
		;PV Vmax
			if IsNumber(Json_Get($buffer,'.data.pch."PV Vmax".value')) then
				;Json_Put($buffer, '.data.pch."PV Vmax".value', Json_Get($buffer, '.data.pch."PV Vmax".value')/100, True)
				Json_Put($buffer, '.data.pch."PV Vmax".value', Number(StringFormat("%.1f", Json_Get($buffer, '.data.pch."PV Vmax".value'))), True)
			endif
		; PV max/meanPG
			if IsNumber(Json_Get($buffer,'.data.pch."PV maxPG".value')) then
				if IsNumber(Json_Get($buffer, '.data.pch."PV meanPG".value')) then
					Json_Put($buffer, '.data.pch."PV max/meanPG".value', Round(Json_Get($buffer, '.data.pch."PV maxPG".value'), 0) & '/' & Round(Json_Get($buffer, '.data.pch."PV meanPG".value'), 0), True)
				Else
					Json_Put($buffer, '.data.pch."PV max/meanPG".value', Round(Json_Get($buffer, '.data.pch."PV maxPG".value'), 0) & '/', True)
				endif
			elseif IsNumber(Json_Get($buffer, '.data.pch."PV meanPG".value')) then
				Json_Put($buffer, '.data.pch."PV max/meanPG".value', '/' & Round(Json_Get($buffer, '.data.pch."PV meanPG".value'), 0), True)
			endif
		; PR max/meanPG
			if IsNumber(Json_Get($buffer,'.data.pch."PR maxPG".value')) Then
				if IsNumber(Json_Get($buffer, '.data.pch."PR meanPG".value')) then
					Json_Put($buffer, '.data.pch."PR max/meanPG".value', Round(Json_Get($buffer, '.data.pch."PR maxPG".value'), 0) & '/' & Round(Json_Get($buffer, '.data.pch."PR meanPG".value'), 0), True)
				else
					Json_Put($buffer, '.data.pch."PR max/meanPG".value', Round(Json_Get($buffer, '.data.pch."PR maxPG".value'), 0) & '/', True)
				endif
			elseif IsNumber(Json_Get($buffer, '.data.pch."PR meanPG".value')) then
				Json_Put($buffer, '.data.pch."PR max/meanPG".value', '/' & Round(Json_Get($buffer, '.data.pch."PR meanPG".value'), 0), True)
			endif
		; MV max/meanPG
			if IsNumber(Json_Get($buffer,'.data.mch."MV maxPG".value')) Then
				if IsNumber(Json_Get($buffer, '.data.mch."MV meanPG".value')) then
					Json_Put($buffer, '.data.mch."MV max/meanPG".value', Round(Json_Get($buffer, '.data.mch."MV maxPG".value'), 0) & '/' & Round(Json_Get($buffer, '.data.mch."MV meanPG".value'), 0), True)
				Else
					Json_Put($buffer, '.data.mch."MV max/meanPG".value', Round(Json_Get($buffer, '.data.mch."MV maxPG".value'), 0) & '/', True)
				endif
			elseif IsNumber(Json_Get($buffer, '.data.mch."MV meanPG".value')) then
					Json_Put($buffer, '.data.mch."MV max/meanPG".value', '/' & Round(Json_Get($buffer, '.data.mch."MV meanPG".value'), 0), True)
			endif
		; TV max/meanPG
			if IsNumber(Json_Get($buffer,'.data.tch."TV maxPG".value')) Then
				if IsNumber(Json_Get($buffer, '.data.tch."TV meanPG".value')) then
					Json_Put($buffer, '.data.tch."TV max/meanPG".value', Round(Json_Get($buffer, '.data.tch."TV maxPG".value'), 0) & '/' & Round(Json_Get($buffer, '.data.tch."TV meanPG".value'), 0), True)
				Else
					Json_Put($buffer, '.data.tch."TV max/meanPG".value', Round(Json_Get($buffer, '.data.tch."TV maxPG".value'), 0) & '/', True)
				endif
			elseif IsNumber(Json_Get($buffer, '.data.tch."TV meanPG".value')) then
					Json_Put($buffer, '.data.tch."TV max/meanPG".value', '/' & Round(Json_Get($buffer, '.data.tch."TV meanPG".value'), 0), True)
			endif
		; AV max/meanPG
			if IsNumber(Json_Get($buffer,'.data.ach."AV maxPG".value')) Then
				if IsNumber(Json_Get($buffer, '.data.ach."AV meanPG".value')) then
					Json_Put($buffer, '.data.ach."AV max/meanPG".value', Round(Json_Get($buffer, '.data.ach."AV maxPG".value'), 0) & '/' & Round(Json_Get($buffer, '.data.ach."AV meanPG".value'), 0), True)
				else
					Json_Put($buffer, '.data.ach."AV max/meanPG".value', Round(Json_Get($buffer, '.data.ach."AV maxPG".value'), 0) & '/', True)
				endif
			elseif IsNumber(Json_Get($buffer, '.data.ach."AV meanPG".value')) then
				Json_Put($buffer, '.data.ach."AV max/meanPG".value', '/' & Round(Json_Get($buffer, '.data.ach."AV meanPG".value'), 0), True)
			endif
		; AR ERO
			if IsNumber(Json_Get($buffer, '.data.ach."AR ERO".value')) then
				Json_Put($buffer, '.data.ach."AR ERO".value', Number(StringFormat("%.2f", Json_Get($buffer, '.data.ach."AR ERO".value'))), True)
			endif
		; MR ERO
			if IsNumber(Json_Get($buffer, '.data.mch."MR ERO".value')) then
				Json_Put($buffer, '.data.mch."MR ERO".value', Number(StringFormat("%.2f", Json_Get($buffer, '.data.mch."MR ERO".value'))), True)
			endif
		; AV Vmax
			if IsNumber(Json_Get($buffer, '.data.ach."AV Vmax".value')) then
				Json_Put($buffer, '.data.ach."AV Vmax".value', Number(StringFormat("%.1f", Json_Get($buffer, '.data.ach."AV Vmax".value'))), True)
			endif
	EndIf
EndFunc

; gui get group index
func gui_get_group_index($i, $mod)
	return mod($i, $mod) = 0 ? int($i/5) : int($i/5 + 1)
EndFunc

; initialize XLS template
func dekurz_init()
	; excel
;	$excel = _Excel_Open()
	$excel = _Excel_Open(False, False, False, False, True)
	if @error then return SetError(1, 0, 'Dekurz: Nelze spustit aplikaci Excel.')
	$book = _Excel_BookNew($excel)
	if @error then return SetError(1, 0, 'Dekurz: Nelze vytvořit Excel book.')
	; logging
	logger('Dekurz: Inicializace.')
	; columns width [ group. label | member.label | member.value | member.unit | ... ]
	$book.Activesheet.Range('A1').ColumnWidth = 14.5; group A-E
	for $i = 0 to 3; four columns starts B[66]
		$book.Activesheet.Range(Chr(66 + $i) & '1').ColumnWidth = 17.5
	Next
	; header
	$book.Activesheet.Range('A1').RowHeight = 20
endFunc

func not_empty_group($group)
	if StringLen(GUICtrlRead(Json_Get($buffer, '.group.' & $group & '.id'))) > 0 then return True
	for $member in Json_ObjGet($order, '.data.' & $group)
		if GUICtrlRead(Json_Get($buffer, '.data.' & $group & '."' & $member & '".id')) then return True
	next
	return False
endFunc

; update XLS data & write clipboard
func dekurz()
	; check init
	if $dekurz_init <> 0 then return SetError(1, 0, 'Dekurz: Inicializace aplikace Excel selhala.')
	;clear the clip
	_ClipBoard_Open(0)
	_ClipBoard_Empty()
	if @error then
		logger('Dekurz: Vyprázdnění schránky selhalo.')
	else
		logger('Dekurz: Vyprázdnění schránky.')
	endif
	_ClipBoard_Close()

	; clean-up
	_Excel_RangeDelete($book.Activesheet, 'A1:E49')
	; default font
	$book.Activesheet.Range('A2:E40').Font.Size = 8
	; columns height
	$book.Activesheet.Range('A2:E40').RowHeight = 10
	; number format
	$book.Activesheet.Range('A1:E40').NumberFormat = "@"; string
	; header
	$book.Activesheet.Range('A1').Font.Size = 11
	$book.Activesheet.Range('A1').Font.Bold = True
	_Excel_RangeWrite($book, $book.Activesheet, 'Echokardiografie(TTE) ' &  @MDAY & '.' & @MON & '.' & @YEAR & ':', 'A1')
	; data init
	$row_index = 2
	$column_index = 65; 65 A, 66 B, 67 C, 68 D, 69 E
	; top line
	With $book.Activesheet.Range('A' & $row_index & ':E' & $row_index).Borders(8); $xlEdgeTop
		.LineStyle = 1
		.Weight = 2
	EndWith
	; generate data
	for $group in Json_ObjGet($order, '.group')
		if not_empty_group($group) then
			; group label
			$book.Activesheet.Range('A' & $row_index).Font.Bold = True
			$book.Activesheet.Range('A' & $row_index).Font.Size = 9
			_Excel_RangeWrite($book, $book.Activesheet, Json_ObjGet($buffer, '.group.' & $group & '.label'), 'A' & $row_index)
			$step=False
			$members = Json_ObjGet($order, '.data.' & $group).Keys()
			for $i in Json_ObjGet($map, '.' & $group)
				; line break
				if $column_index = 69 Then
					if $step then $row_index+=1
					$step=False
					$column_index = 65
				endif
				; skip Ao Diam if Asc-Ao 2D
				if $members[$i] == 'Ao Diam' Then
					if GUICtrlRead(Json_Get($buffer, '.data.' & $group & '."' & $members[$i+1] & '".id')) then continueloop
				endif
				if $members[$i] == 'Asc-Ao 2D' Then
					if not GUICtrlRead(Json_Get($buffer, '.data.' & $group & '."' & $members[$i] & '".id')) then continueloop
				endif
				; write value
				if $i <> Null then; not hole
					if GUICtrlRead(Json_Get($buffer, '.data.' & $group & '."' & $members[$i] & '".id')) then; has value
						_Excel_RangeWrite($book, $book.Activesheet, Json_Get($buffer, '.data.' & $group & '."' & $members[$i] & '".label') & ': ' & StringReplace(GUICtrlRead(Json_Get($buffer, '.data.' & $group & '."' & $members[$i] & '".id')), ',', '.') & ' ' & Json_Get($buffer, '.data.' & $group & '."' & $members[$i] & '".unit'), Chr($column_index + 1) & $row_index)
						$step=True
					endif
				endif
				; update index
				$column_index+=1
			next
			; update offset
			if $step then $row_index+=1
			; note
			if StringLen(GUICtrlRead(Json_Get($buffer,'.group.' & $group & '.id'))) > 0 then
				$book.Activesheet.Range('B' & $row_index & ':E' & $row_index).MergeCells = True
				$book.Activesheet.Range('B' & $row_index).Font.Bold = True
				$book.Activesheet.Range('A' & $row_index).RowHeight = 13
				_Excel_RangeWrite($book, $book.Activesheet, GUICtrlRead(Json_Get($buffer,'.group.' & $group & '.id')), 'B' & $row_index)
			endif
			; group line
			With $book.Activesheet.Range('A' & $row_index & ':E' & $row_index).Borders(9); $xlEdgeBottom
				.LineStyle = 1
				.Weight = 2
			EndWith
			; update index
			$row_index+=1
			$column_index = 65
		endif
	next
	; result
	$book.Activesheet.Range('A' & $row_index).Font.Size = 10
	$book.Activesheet.Range('A' & $row_index).Font.Bold = True
	_Excel_RangeWrite($book, $book.Activesheet, 'Závěr:', 'A' & $row_index)
	$row_index+=1
	$book.Activesheet.Range('A' & $row_index & ':E' & $row_index).MergeCells = True
	$book.Activesheet.Range('A' & $row_index).Font.Size = 10
	$book.Activesheet.Range('A' & $row_index).Font.Bold = True
	_Excel_RangeWrite($book, $book.Activesheet, StringReplace(GUICtrlRead($edit_dekurz), @CRLF, @LF), 'A' & $row_index)
	$row_index+=1
	; footer
	$book.Activesheet.Range('A' & $row_index & ':E' & $row_index).Font.Size = 10
	_Excel_RangeWrite($book, $book.Activesheet, 'Dne: ' & @MDAY & '.' & @MON & '.' & @YEAR, 'A' & $row_index)
	_Excel_RangeWrite($book, $book.Activesheet, 'MUDr. ' & Json_ObjGet($user, '.' & $cmdline[1]), 'D' & $row_index)
	; clip
	_Excel_RangeCopyPaste($book.ActiveSheet, 'A1:E' & $row_index + 1); data + one empty line..
	if @error then
		logger('Dekurz: Kopírování do schránky selhalo.')
		return SetError(1, 0, 'Dekurz: Nelze kopírovat data.')
	else
		logger('Dekurz: Kopírování do schránky.')
	endif
EndFunc

func print(); 2100 x 2970
	local $printer, $printer_error
	; GDI+ init
	_GDIPlus_Startup()
	$logo = _GDIPlus_BitmapCreateFromMemory(_LZNTDecompress(Binary($logo_file)))
	$logo_handle = _GDIPlus_BitmapCreateHBITMAPFromBitmap($logo)
	$qr = _GDIPlus_BitmapCreateFromMemory(_LZNTDecompress(Binary($qr_file)))
	$qr_handle = _GDIPlus_BitmapCreateHBITMAPFromBitmap($qr)
	;priner init
	$printer = _PrintDllStart($printer_error)
	if @error then return SetError(1, 0, 'Tisk: ' & $printer_error)
	; select printer
	;_PrintSetPrinter($printer)
	; log printer name
	$printer_name = _PrintGetPrinter($printer)
	if @error Then
		logger('Tisk: Nepodařilo se získat název tiskárny.')
	else
		logger('Tisk: Tiskárna ' & $printer_name)
	endif
	; printer create page
	_PrintStartPrint($printer)
	if @error then
		logger('Tisk: Inicializace selhala.')
	else
		logger('Tisk: Inicializace.')
	endif
	$max_height = _PrintGetPageHeight($printer) - _PrintGetYOffset($printer)
	$max_width = _PrintGetPageWidth($printer) - _PrintGetXOffset($printer)
	$line_offset = 5
	$top_offset = 0

	;logo
	_PrintImageFromDC($printer, $logo_handle, 0, 0, 128, 128, 50, 45, 338, 338); 128 x 128 inch 96 DPI => 338 mm
	; QR code
	_PrintImageFromDC($printer, $qr_handle, 0, 0, 123, 123, $max_width - 325 - 50, 50, 325, 325); 123 x 123 inch 96 DPI => 325 mm
	; address
	_PrintSetFont($printer,'Arial',12, Default, 'bold')
	$text_height = _PrintGetTextHeight($printer, 'Arial')
	$top_offset += 125
	_PrintText($printer, 'Echokardiografické vyšetření (TTE)', ($max_width - _PrintGetTextWidth($printer, 'Echokardiografické vyšetření (TTE)'))/2, $top_offset)
	$top_offset+=$text_height + $line_offset
	_PrintSetFont($printer,'Arial',11, Default, Default)
	$text_height = _PrintGetTextHeight($printer, 'Arial')
	_PrintText($printer, 'Kardiologie Praha 17 - Řepy s.r.o.', ($max_width - _PrintGetTextWidth($printer, 'Kardiologie Praha 17 - Řepy s.r.o.'))/2, $top_offset)
	$top_offset+=$text_height + $line_offset
	_PrintText($printer, 'Poliklinika - Žufanova 1113/3', ($max_width - _PrintGetTextWidth($printer, 'Poliklinika - Žufanova 1113/3'))/2, $top_offset)
	$top_offset+=$text_height + $line_offset
	_PrintText($printer, 'Tel: +420/235318915', ($max_width - _PrintGetTextWidth($printer, 'Tel: +420/235318915'))/2, $top_offset)
	$top_offset+=$text_height + $line_offset
	; separator
	_PrintSetLineWid($printer, 2)
	_PrintLine($printer, 50, $top_offset + 75, $max_width - 50, $top_offset + 75)
	$top_offset+=75
	; patient
	_PrintSetFont($printer, 'Arial',10, Default, Default)
	$text_height = _PrintGetTextHeight($printer, 'Arial')
	$top_offset += 25
	_PrintText($printer, 'Jméno: ' & $cmdline[3]& ' ' & $cmdline[4], 50, $top_offset)
	_PrintText($printer, 'Výška: ' & StringReplace(GUICtrlRead($input_height), ',', '.') & ' cm', 550, $top_offset)
	_PrintText($printer, 'BSA: ' & GUICtrlRead($input_bsa) & ' m²', 1050, $top_offset)
	_PrintText($printer, 'Datum: ' & @MDAY & '.' & @MON & '.' & @YEAR, 1550, $top_offset)
	$top_offset+=$text_height + $line_offset
	_PrintText($printer, 'Rodné číslo: ' & StringLeft($cmdline[2], 6) & '/' & StringTrimLeft($cmdline[2], 6), 50, $top_offset)
	_PrintText($printer, 'Váha: ' & StringReplace(GUICtrlRead($input_weight), ',', '.') & ' kg', 550, $top_offset)
	; separator
	_PrintSetLineWid($printer, 2)
	_PrintLine($printer, 50, $top_offset + 70, $max_width - 50, $top_offset + 70)
	$top_offset+=70
	; data
	_PrintSetFont($printer, 'Arial',10, Default, Default)
	$text_height = _PrintGetTextHeight($printer, 'Arial')
	$top_offset+=15
	$group_index = $top_offset
	for $group in Json_ObjGet($order, '.group')
		if not_empty_group($group) then
			;check new page
			if $top_offset + 200 >= $max_height Then
				_PrintNewPage($printer)
				$top_offset = 50
				$group_index = $top_offset
			endif
			; line index
			$line_index = 1
			; group line
			if $group_index <> $top_offset then; skip first one
				_PrintSetLineCol($printer, 0xd3d3d3)
				_PrintSetLineWid($printer, 2)
				_PrintLine($printer, 50, $top_offset, $max_width - 50, $top_offset)
			endif
			; group label
			_PrintSetFont($printer, 'Arial', 9, Default, 'bold')
			_PrintText($printer, Json_ObjGet($buffer,'.group.' & $group & '.label'), 50, $top_offset)
			$top_offset += $text_height + $line_offset; step down
			; group data
			_PrintSetFont($printer, 'Arial', 8, Default, Default)
			$step=False
			$members = Json_ObjGet($order, '.data.' & $group).Keys()
			for $i in Json_ObjGet($map, '.' & $group)
				; line break
				if $line_index = 5 Then
					if $step then $top_offset += $text_height + $line_offset
					$step=False
					$line_index = 1
				endif
				; skip Ao Diam if Asc-Ao 2D
				if $members[$i] == 'Ao Diam' Then
					if GUICtrlRead(Json_Get($buffer, '.data.' & $group & '."' & $members[$i+1] & '".id')) then continueloop
				endif
				if $members[$i] == 'Asc-Ao 2D' Then
					if not GUICtrlRead(Json_Get($buffer, '.data.' & $group & '."' & $members[$i] & '".id')) then continueloop
				endif
				; write value
				if $i <> Null then; not hole
					if GUICtrlRead(Json_Get($buffer, '.data.' & $group & '."' & $members[$i] & '".id')) then; has value
						_PrintText($printer, Json_Get($buffer,'.data.' & $group & '."' & $members[$i] & '".label') & ': ' & StringReplace(String(GuiCtrlRead(Json_Get($buffer,'.data.' & $group & '."' & $members[$i] & '".id'))), ',', '.') & ' ' & Json_Get($buffer,'.data.' & $group & '."' & $members[$i] & '".unit'), 400*$line_index, $top_offset)
						$step=True
					endif
				endif
				; update index
				$line_index+=1
			next
			; update offset
			if $step then $top_offset += $text_height + $line_offset
			; note
			_PrintSetFont($printer, 'Arial', 8, Default, 'bold')
			$text_height = _PrintGetTextHeight($printer, 'Arial')
			$line_len = 395
			if StringLen(GUICtrlRead(Json_Get($buffer,'.group.' & $group & '.id'))) > 0 then
				for $word in StringSplit(GUICtrlRead(Json_Get($buffer,'.group.' & $group & '.id')), ' ', 2); no count
					if _PrintGetTextWidth($printer, ' ' & $word) + $line_len > $max_width - 80 Then
						$line_len=395
						$top_offset+=$text_height + $line_offset
					EndIf
					_PrintText($printer, ' ' & $word, $line_len, $top_offset)
					$line_len+=_PrintGetTextWidth($printer, ' ' & $word)
				next
				; update offset
				$top_offset += $text_height + $line_offset
			endif
		endif
	next
	; separator
	_PrintSetLineCol($printer, 0x000000); black
	_PrintSetLineWid($printer, 2)
	_PrintLine($printer, 50, $top_offset + 15, $max_width - 50, $top_offset + 15)
	$top_offset += 35
	; result label
	_PrintSetFont($printer, 'Arial', 9, Default, 'bold')
	_PrintText($printer, 'Závěr:', 50, $top_offset)
	$top_offset += $text_height + $line_offset + 5
	; result
	_PrintSetFont($printer, 'Arial', 9, Default, Default)
	$text_height = _PrintGetTextHeight($printer, 'Arial')
	$line_len = 50
	for $phrase in StringSplit(GUICtrlRead($edit_dekurz), @LF, 2); no count
		for $word in StringSplit($phrase, ' ', 2); no count
			if _PrintGetTextWidth($printer, ' ' & $word) + $line_len > $max_width - 80 Then
				; check new page
				if $top_offset + 200 >= $max_height Then
					_PrintNewPage($printer)
					$top_offset = 50
				endif
				; line break
				$line_len=50
				$top_offset+=$text_height + $line_offset
			EndIf
			_PrintText($printer, ' ' & $word, $line_len, $top_offset)
			$line_len+=_PrintGetTextWidth($printer, ' ' & $word)
		next
		; phrase break
		$top_offset+=$text_height + $line_offset
		$line_len=50
	next
	; footer
	$top_offset+=$text_height + $line_offset
	; date
	_PrintText($printer, 'Dne: ' & @MDAY & '.' & @MON & '.' & @YEAR, 50, $top_offset)
	; singnature
	_PrintText($printer, 'MUDr. ' & Json_ObjGet($user, '.' & $cmdline[1]) , 1250, $top_offset)
	; print
	_PrintEndPrint($printer)
	if @error Then
		logger('Tisk: Tisk selhal.')
	else
		logger('Tisk: Tisk.')
	endif
	; print de-init
	_printDllClose($printer)
	; GDI+ de-init
	 _WinAPI_DeleteObject($logo_handle)
	 _WinAPI_DeleteObject($qr_handle)
	_GDIPlus_ImageDispose($logo)
	_GDIPlus_ImageDispose($qr)
	_GDIPlus_Shutdown()
EndFunc
